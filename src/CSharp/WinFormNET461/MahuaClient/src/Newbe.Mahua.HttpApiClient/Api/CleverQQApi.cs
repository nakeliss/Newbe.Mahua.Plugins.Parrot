/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newbe.Mahua.HttpApiClient.Client;
using Newbe.Mahua.HttpApiClient.Model;

namespace Newbe.Mahua.HttpApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICleverQQApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiAddBkList (CleverQQApiAddBkListHttpInput input = null);

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiAddBkListWithHttpInfo (CleverQQApiAddBkListHttpInput input = null);
        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiAddQQ (CleverQQApiAddQQHttpInput input = null);

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiAddQQWithHttpInfo (CleverQQApiAddQQHttpInput input = null);
        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiAdminInviteGroup (CleverQQApiAdminInviteGroupHttpInput input = null);

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiAdminInviteGroupWithHttpInfo (CleverQQApiAdminInviteGroupHttpInput input = null);
        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiBeInput (CleverQQApiBeInputHttpInput input = null);

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiBeInputWithHttpInfo (CleverQQApiBeInputHttpInput input = null);
        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiCheckGift (CleverQQApiCheckGiftHttpInput input = null);

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiCheckGiftWithHttpInfo (CleverQQApiCheckGiftHttpInput input = null);
        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiCreateDisGroup (CleverQQApiCreateDisGroupHttpInput input = null);

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiCreateDisGroupWithHttpInfo (CleverQQApiCreateDisGroupHttpInput input = null);
        /// <summary>
        /// 解除好友黑名单
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiDelBkList (CleverQQApiDelBkListHttpInput input = null);

        /// <summary>
        /// 解除好友黑名单
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiDelBkListWithHttpInfo (CleverQQApiDelBkListHttpInput input = null);
        /// <summary>
        /// 删除好友 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiDelFriend (CleverQQApiDelFriendHttpInput input = null);

        /// <summary>
        /// 删除好友 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiDelFriendWithHttpInfo (CleverQQApiDelFriendHttpInput input = null);
        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiDelQQ (CleverQQApiDelQQHttpInput input = null);

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiDelQQWithHttpInfo (CleverQQApiDelQQHttpInput input = null);
        /// <summary>
        /// 请求禁用插件自身
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiDisabledPlugin (CleverQQApiDisabledPluginHttpInput input = null);

        /// <summary>
        /// 请求禁用插件自身
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiDisabledPluginWithHttpInfo (CleverQQApiDisabledPluginHttpInput input = null);
        /// <summary>
        /// 群ID转群号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGIDTransGN (CleverQQApiGIDTransGNHttpInput input = null);

        /// <summary>
        /// 群ID转群号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGIDTransGNWithHttpInfo (CleverQQApiGIDTransGNHttpInput input = null);
        /// <summary>
        /// 群号转群ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGNTransGID (CleverQQApiGNTransGIDHttpInput input = null);

        /// <summary>
        /// 群号转群ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGNTransGIDWithHttpInfo (CleverQQApiGNTransGIDHttpInput input = null);
        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetAge (CleverQQApiGetAgeHttpInput input = null);

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetAgeWithHttpInfo (CleverQQApiGetAgeHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetBkn (CleverQQApiGetBknHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetBknWithHttpInfo (CleverQQApiGetBknHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetBkn32 (CleverQQApiGetBkn32HttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetBkn32WithHttpInfo (CleverQQApiGetBkn32HttpInput input = null);
        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetBlogPsKey (CleverQQApiGetBlogPsKeyHttpInput input = null);

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetBlogPsKeyWithHttpInfo (CleverQQApiGetBlogPsKeyHttpInput input = null);
        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetClassRoomPsKey (CleverQQApiGetClassRoomPsKeyHttpInput input = null);

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetClassRoomPsKeyWithHttpInfo (CleverQQApiGetClassRoomPsKeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetClientkey (CleverQQApiGetClientkeyHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetClientkeyWithHttpInfo (CleverQQApiGetClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的Cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetCookies (CleverQQApiGetCookiesHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的Cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetCookiesWithHttpInfo (CleverQQApiGetCookiesHttpInput input = null);
        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetDisGroupList (CleverQQApiGetDisGroupListHttpInput input = null);

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetDisGroupListWithHttpInfo (CleverQQApiGetDisGroupListHttpInput input = null);
        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetDisGroupMemberList (CleverQQApiGetDisGroupMemberListHttpInput input = null);

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetDisGroupMemberListWithHttpInfo (CleverQQApiGetDisGroupMemberListHttpInput input = null);
        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetEmail (CleverQQApiGetEmailHttpInput input = null);

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetEmailWithHttpInfo (CleverQQApiGetEmailHttpInput input = null);
        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetExpertDays (CleverQQApiGetExpertDaysHttpInput input = null);

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetExpertDaysWithHttpInfo (CleverQQApiGetExpertDaysHttpInput input = null);
        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetFriendList (CleverQQApiGetFriendListHttpInput input = null);

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetFriendListWithHttpInfo (CleverQQApiGetFriendListHttpInput input = null);
        /// <summary>
        /// 取得好友列表，返回内容#换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetFriendListB (CleverQQApiGetFriendListBHttpInput input = null);

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetFriendListBWithHttpInfo (CleverQQApiGetFriendListBHttpInput input = null);
        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetFriendsRemark (CleverQQApiGetFriendsRemarkHttpInput input = null);

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetFriendsRemarkWithHttpInfo (CleverQQApiGetFriendsRemarkHttpInput input = null);
        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGender (CleverQQApiGetGenderHttpInput input = null);

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGenderWithHttpInfo (CleverQQApiGetGenderHttpInput input = null);
        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupAddMode (CleverQQApiGetGroupAddModeHttpInput input = null);

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupAddModeWithHttpInfo (CleverQQApiGetGroupAddModeHttpInput input = null);
        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupAdmin (CleverQQApiGetGroupAdminHttpInput input = null);

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupAdminWithHttpInfo (CleverQQApiGetGroupAdminHttpInput input = null);
        /// <summary>
        /// 取对象群名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupCard (CleverQQApiGetGroupCardHttpInput input = null);

        /// <summary>
        /// 取对象群名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupCardWithHttpInfo (CleverQQApiGetGroupCardHttpInput input = null);
        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupChatLv (CleverQQApiGetGroupChatLvHttpInput input = null);

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupChatLvWithHttpInfo (CleverQQApiGetGroupChatLvHttpInput input = null);
        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupList (CleverQQApiGetGroupListHttpInput input = null);

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupListWithHttpInfo (CleverQQApiGetGroupListHttpInput input = null);
        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupListA (CleverQQApiGetGroupListAHttpInput input = null);

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupListAWithHttpInfo (CleverQQApiGetGroupListAHttpInput input = null);
        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupListB (CleverQQApiGetGroupListBHttpInput input = null);

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupListBWithHttpInfo (CleverQQApiGetGroupListBHttpInput input = null);
        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupLv (CleverQQApiGetGroupLvHttpInput input = null);

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupLvWithHttpInfo (CleverQQApiGetGroupLvHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupMemberList (CleverQQApiGetGroupMemberListHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListWithHttpInfo (CleverQQApiGetGroupMemberListHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupMemberListB (CleverQQApiGetGroupMemberListBHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListBWithHttpInfo (CleverQQApiGetGroupMemberListBHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupMemberListC (CleverQQApiGetGroupMemberListCHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListCWithHttpInfo (CleverQQApiGetGroupMemberListCHttpInput input = null);
        /// <summary>
        /// 查询对象群当前人数和上限人数
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupMemberNum (CleverQQApiGetGroupMemberNumHttpInput input = null);

        /// <summary>
        /// 查询对象群当前人数和上限人数
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberNumWithHttpInfo (CleverQQApiGetGroupMemberNumHttpInput input = null);
        /// <summary>
        /// 取QQ群名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupName (CleverQQApiGetGroupNameHttpInput input = null);

        /// <summary>
        /// 取QQ群名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupNameWithHttpInfo (CleverQQApiGetGroupNameHttpInput input = null);
        /// <summary>
        /// 取得QQ群页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetGroupPsKey (CleverQQApiGetGroupPsKeyHttpInput input = null);

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetGroupPsKeyWithHttpInfo (CleverQQApiGetGroupPsKeyHttpInput input = null);
        /// <summary>
        /// 取框架日志
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetLog (CleverQQApiGetLogHttpInput input = null);

        /// <summary>
        /// 取框架日志
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetLogWithHttpInfo (CleverQQApiGetLogHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的长Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetLongClientkey (CleverQQApiGetLongClientkeyHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetLongClientkeyWithHttpInfo (CleverQQApiGetLongClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数长Ldw
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetLongLdw (CleverQQApiGetLongLdwHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetLongLdwWithHttpInfo (CleverQQApiGetLongLdwHttpInput input = null);
        /// <summary>
        /// 取对象昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetNick (CleverQQApiGetNickHttpInput input = null);

        /// <summary>
        /// 取对象昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetNickWithHttpInfo (CleverQQApiGetNickHttpInput input = null);
        /// <summary>
        /// 取群公告，返回该群最新公告
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetNotice (CleverQQApiGetNoticeHttpInput input = null);

        /// <summary>
        /// 取群公告，返回该群最新公告
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetNoticeWithHttpInfo (CleverQQApiGetNoticeHttpInput input = null);
        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetObjInfo (CleverQQApiGetObjInfoHttpInput input = null);

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetObjInfoWithHttpInfo (CleverQQApiGetObjInfoHttpInput input = null);
        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetObjLevel (CleverQQApiGetObjLevelHttpInput input = null);

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetObjLevelWithHttpInfo (CleverQQApiGetObjLevelHttpInput input = null);
        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetObjVote (CleverQQApiGetObjVoteHttpInput input = null);

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetObjVoteWithHttpInfo (CleverQQApiGetObjVoteHttpInput input = null);
        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetOffLineList (CleverQQApiGetOffLineListHttpInput input = null);

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetOffLineListWithHttpInfo (CleverQQApiGetOffLineListHttpInput input = null);
        /// <summary>
        /// 取框架在线QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetOnLineList (CleverQQApiGetOnLineListHttpInput input = null);

        /// <summary>
        /// 取框架在线QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetOnLineListWithHttpInfo (CleverQQApiGetOnLineListHttpInput input = null);
        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetOnlineState (CleverQQApiGetOnlineStateHttpInput input = null);

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetOnlineStateWithHttpInfo (CleverQQApiGetOnlineStateHttpInput input = null);
        /// <summary>
        /// 取个人说明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetPerExp (CleverQQApiGetPerExpHttpInput input = null);

        /// <summary>
        /// 取个人说明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetPerExpWithHttpInfo (CleverQQApiGetPerExpHttpInput input = null);
        /// <summary>
        /// 根据图片GUID取得图片下载连接
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetPicLink (CleverQQApiGetPicLinkHttpInput input = null);

        /// <summary>
        /// 根据图片GUID取得图片下载连接
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetPicLinkWithHttpInfo (CleverQQApiGetPicLinkHttpInput input = null);
        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetQQAddMode (CleverQQApiGetQQAddModeHttpInput input = null);

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetQQAddModeWithHttpInfo (CleverQQApiGetQQAddModeHttpInput input = null);
        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetQQAge (CleverQQApiGetQQAgeHttpInput input = null);

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetQQAgeWithHttpInfo (CleverQQApiGetQQAgeHttpInput input = null);
        /// <summary>
        /// 取框架所有QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetQQList (CleverQQApiGetQQListHttpInput input = null);

        /// <summary>
        /// 取框架所有QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetQQListWithHttpInfo (CleverQQApiGetQQListHttpInput input = null);
        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetQidianQQFriendsList (CleverQQApiGetQidianQQFriendsListHttpInput input = null);

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetQidianQQFriendsListWithHttpInfo (CleverQQApiGetQidianQQFriendsListHttpInput input = null);
        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetRInf (CleverQQApiGetRInfHttpInput input = null);

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetRInfWithHttpInfo (CleverQQApiGetRInfHttpInput input = null);
        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetShieldedState (CleverQQApiGetShieldedStateHttpInput input = null);

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetShieldedStateWithHttpInfo (CleverQQApiGetShieldedStateHttpInput input = null);
        /// <summary>
        /// 取个人签名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetSign (CleverQQApiGetSignHttpInput input = null);

        /// <summary>
        /// 取个人签名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetSignWithHttpInfo (CleverQQApiGetSignHttpInput input = null);
        /// <summary>
        /// 获取当前框架内部时间戳
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetTimeStamp (CleverQQApiGetTimeStampHttpInput input = null);

        /// <summary>
        /// 获取当前框架内部时间戳
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetTimeStampWithHttpInfo (CleverQQApiGetTimeStampHttpInput input = null);
        /// <summary>
        /// 取框架版本号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetVer (CleverQQApiGetVerHttpInput input = null);

        /// <summary>
        /// 取框架版本号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetVerWithHttpInfo (CleverQQApiGetVerHttpInput input = null);
        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetVoiLink (CleverQQApiGetVoiLinkHttpInput input = null);

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetVoiLinkWithHttpInfo (CleverQQApiGetVoiLinkHttpInput input = null);
        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetWpa (CleverQQApiGetWpaHttpInput input = null);

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetWpaWithHttpInfo (CleverQQApiGetWpaHttpInput input = null);
        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGetZonePsKey (CleverQQApiGetZonePsKeyHttpInput input = null);

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGetZonePsKeyWithHttpInfo (CleverQQApiGetZonePsKeyHttpInput input = null);
        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiGiveGift (CleverQQApiGiveGiftHttpInput input = null);

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiGiveGiftWithHttpInfo (CleverQQApiGiveGiftHttpInput input = null);
        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiHandleEvent (CleverQQApiHandleEventHttpInput input = null);

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiHandleEventWithHttpInfo (CleverQQApiHandleEventHttpInput input = null);
        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiHandleGroupEvent (CleverQQApiHandleGroupEventHttpInput input = null);

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiHandleGroupEventWithHttpInfo (CleverQQApiHandleGroupEventHttpInput input = null);
        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiIfFriend (CleverQQApiIfFriendHttpInput input = null);

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiIfFriendWithHttpInfo (CleverQQApiIfFriendHttpInput input = null);
        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiInviteDisGroup (CleverQQApiInviteDisGroupHttpInput input = null);

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiInviteDisGroupWithHttpInfo (CleverQQApiInviteDisGroupHttpInput input = null);
        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiIsEnable (CleverQQApiIsEnableHttpInput input = null);

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiIsEnableWithHttpInfo (CleverQQApiIsEnableHttpInput input = null);
        /// <summary>
        /// 查询对象是否在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiIsOnline (CleverQQApiIsOnlineHttpInput input = null);

        /// <summary>
        /// 查询对象是否在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiIsOnlineWithHttpInfo (CleverQQApiIsOnlineHttpInput input = null);
        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiIsShutUp (CleverQQApiIsShutUpHttpInput input = null);

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiIsShutUpWithHttpInfo (CleverQQApiIsShutUpHttpInput input = null);
        /// <summary>
        /// 申请加群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiJoinGroup (CleverQQApiJoinGroupHttpInput input = null);

        /// <summary>
        /// 申请加群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiJoinGroupWithHttpInfo (CleverQQApiJoinGroupHttpInput input = null);
        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiKickDisGroupMBR (CleverQQApiKickDisGroupMBRHttpInput input = null);

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiKickDisGroupMBRWithHttpInfo (CleverQQApiKickDisGroupMBRHttpInput input = null);
        /// <summary>
        /// 将对象移除群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiKickGroupMBR (CleverQQApiKickGroupMBRHttpInput input = null);

        /// <summary>
        /// 将对象移除群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiKickGroupMBRWithHttpInfo (CleverQQApiKickGroupMBRHttpInput input = null);
        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiLoginQQ (CleverQQApiLoginQQHttpInput input = null);

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiLoginQQWithHttpInfo (CleverQQApiLoginQQHttpInput input = null);
        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiNoAdminInviteGroup (CleverQQApiNoAdminInviteGroupHttpInput input = null);

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiNoAdminInviteGroupWithHttpInfo (CleverQQApiNoAdminInviteGroupHttpInput input = null);
        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiOffLineQQ (CleverQQApiOffLineQQHttpInput input = null);

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiOffLineQQWithHttpInfo (CleverQQApiOffLineQQHttpInput input = null);
        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiOutPutLog (CleverQQApiOutPutLogHttpInput input = null);

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiOutPutLogWithHttpInfo (CleverQQApiOutPutLogHttpInput input = null);
        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiPBGroupNotic (CleverQQApiPBGroupNoticHttpInput input = null);

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiPBGroupNoticWithHttpInfo (CleverQQApiPBGroupNoticHttpInput input = null);
        /// <summary>
        /// QQ群作业发布
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiPBHomeWork (CleverQQApiPBHomeWorkHttpInput input = null);

        /// <summary>
        /// QQ群作业发布
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiPBHomeWorkWithHttpInfo (CleverQQApiPBHomeWorkHttpInput input = null);
        /// <summary>
        /// 退出讨论组
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiQuitDisGroup (CleverQQApiQuitDisGroupHttpInput input = null);

        /// <summary>
        /// 退出讨论组
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiQuitDisGroupWithHttpInfo (CleverQQApiQuitDisGroupHttpInput input = null);
        /// <summary>
        /// 退群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiQuitGroup (CleverQQApiQuitGroupHttpInput input = null);

        /// <summary>
        /// 退群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiQuitGroupWithHttpInfo (CleverQQApiQuitGroupHttpInput input = null);
        /// <summary>
        /// 发送JSON结构消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSendJSON (CleverQQApiSendJSONHttpInput input = null);

        /// <summary>
        /// 发送JSON结构消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSendJSONWithHttpInfo (CleverQQApiSendJSONHttpInput input = null);
        /// <summary>
        /// 发送普通文本消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSendMsg (CleverQQApiSendMsgHttpInput input = null);

        /// <summary>
        /// 发送普通文本消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSendMsgWithHttpInfo (CleverQQApiSendMsgHttpInput input = null);
        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSendPack (CleverQQApiSendPackHttpInput input = null);

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSendPackWithHttpInfo (CleverQQApiSendPackHttpInput input = null);
        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSendVoice (CleverQQApiSendVoiceHttpInput input = null);

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSendVoiceWithHttpInfo (CleverQQApiSendVoiceHttpInput input = null);
        /// <summary>
        /// 发送XML消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSendXML (CleverQQApiSendXMLHttpInput input = null);

        /// <summary>
        /// 发送XML消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSendXMLWithHttpInfo (CleverQQApiSendXMLHttpInput input = null);
        /// <summary>
        /// 获取会话SessionKey密钥
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSessionKey (CleverQQApiSessionKeyHttpInput input = null);

        /// <summary>
        /// 获取会话SessionKey密钥
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSessionKeyWithHttpInfo (CleverQQApiSessionKeyHttpInput input = null);
        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetAdmin (CleverQQApiSetAdminHttpInput input = null);

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetAdminWithHttpInfo (CleverQQApiSetAdminHttpInput input = null);
        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetAnon (CleverQQApiSetAnonHttpInput input = null);

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetAnonWithHttpInfo (CleverQQApiSetAnonHttpInput input = null);
        /// <summary>
        /// 修改讨论组名称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetDisGroupName (CleverQQApiSetDisGroupNameHttpInput input = null);

        /// <summary>
        /// 修改讨论组名称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetDisGroupNameWithHttpInfo (CleverQQApiSetDisGroupNameHttpInput input = null);
        /// <summary>
        /// 修改好友备注姓名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetFriendsRemark (CleverQQApiSetFriendsRemarkHttpInput input = null);

        /// <summary>
        /// 修改好友备注姓名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetFriendsRemarkWithHttpInfo (CleverQQApiSetFriendsRemarkHttpInput input = null);
        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetGroupCard (CleverQQApiSetGroupCardHttpInput input = null);

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetGroupCardWithHttpInfo (CleverQQApiSetGroupCardHttpInput input = null);
        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetRInf (CleverQQApiSetRInfHttpInput input = null);

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetRInfWithHttpInfo (CleverQQApiSetRInfHttpInput input = null);
        /// <summary>
        /// 屏蔽或接收某群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSetShieldedGroup (CleverQQApiSetShieldedGroupHttpInput input = null);

        /// <summary>
        /// 屏蔽或接收某群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSetShieldedGroupWithHttpInfo (CleverQQApiSetShieldedGroupHttpInput input = null);
        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiShakeWindow (CleverQQApiShakeWindowHttpInput input = null);

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiShakeWindowWithHttpInfo (CleverQQApiShakeWindowHttpInput input = null);
        /// <summary>
        /// 群内禁言某人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiShutUP (CleverQQApiShutUPHttpInput input = null);

        /// <summary>
        /// 群内禁言某人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiShutUPWithHttpInfo (CleverQQApiShutUPHttpInput input = null);
        /// <summary>
        /// QQ群签到（成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiSignIn (CleverQQApiSignInHttpInput input = null);

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiSignInWithHttpInfo (CleverQQApiSignInHttpInput input = null);
        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiTakeGift (CleverQQApiTakeGiftHttpInput input = null);

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiTakeGiftWithHttpInfo (CleverQQApiTakeGiftHttpInput input = null);
        /// <summary>
        /// 腾讯Tea加密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiTea加密 (CleverQQApiTea加密HttpInput input = null);

        /// <summary>
        /// 腾讯Tea加密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiTea加密WithHttpInfo (CleverQQApiTea加密HttpInput input = null);
        /// <summary>
        /// 腾讯Tea解密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiTea解密 (CleverQQApiTea解密HttpInput input = null);

        /// <summary>
        /// 腾讯Tea解密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiTea解密WithHttpInfo (CleverQQApiTea解密HttpInput input = null);
        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiUpLoadPic (CleverQQApiUpLoadPicHttpInput input = null);

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiUpLoadPicWithHttpInfo (CleverQQApiUpLoadPicHttpInput input = null);
        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiUpLoadVoice (CleverQQApiUpLoadVoiceHttpInput input = null);

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiUpLoadVoiceWithHttpInfo (CleverQQApiUpLoadVoiceHttpInput input = null);
        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiUpVote (CleverQQApiUpVoteHttpInput input = null);

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiUpVoteWithHttpInfo (CleverQQApiUpVoteHttpInput input = null);
        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1CleverQQApiWithdrawMsg (CleverQQApiWithdrawMsgHttpInput input = null);

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1CleverQQApiWithdrawMsgWithHttpInfo (CleverQQApiWithdrawMsgHttpInput input = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiAddBkListAsync (CleverQQApiAddBkListHttpInput input = null);

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAddBkListAsyncWithHttpInfo (CleverQQApiAddBkListHttpInput input = null);
        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiAddQQAsync (CleverQQApiAddQQHttpInput input = null);

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAddQQAsyncWithHttpInfo (CleverQQApiAddQQHttpInput input = null);
        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiAdminInviteGroupAsync (CleverQQApiAdminInviteGroupHttpInput input = null);

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAdminInviteGroupAsyncWithHttpInfo (CleverQQApiAdminInviteGroupHttpInput input = null);
        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiBeInputAsync (CleverQQApiBeInputHttpInput input = null);

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiBeInputAsyncWithHttpInfo (CleverQQApiBeInputHttpInput input = null);
        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiCheckGiftAsync (CleverQQApiCheckGiftHttpInput input = null);

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiCheckGiftAsyncWithHttpInfo (CleverQQApiCheckGiftHttpInput input = null);
        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiCreateDisGroupAsync (CleverQQApiCreateDisGroupHttpInput input = null);

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiCreateDisGroupAsyncWithHttpInfo (CleverQQApiCreateDisGroupHttpInput input = null);
        /// <summary>
        /// 解除好友黑名单
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiDelBkListAsync (CleverQQApiDelBkListHttpInput input = null);

        /// <summary>
        /// 解除好友黑名单
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelBkListAsyncWithHttpInfo (CleverQQApiDelBkListHttpInput input = null);
        /// <summary>
        /// 删除好友 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiDelFriendAsync (CleverQQApiDelFriendHttpInput input = null);

        /// <summary>
        /// 删除好友 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelFriendAsyncWithHttpInfo (CleverQQApiDelFriendHttpInput input = null);
        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiDelQQAsync (CleverQQApiDelQQHttpInput input = null);

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelQQAsyncWithHttpInfo (CleverQQApiDelQQHttpInput input = null);
        /// <summary>
        /// 请求禁用插件自身
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiDisabledPluginAsync (CleverQQApiDisabledPluginHttpInput input = null);

        /// <summary>
        /// 请求禁用插件自身
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDisabledPluginAsyncWithHttpInfo (CleverQQApiDisabledPluginHttpInput input = null);
        /// <summary>
        /// 群ID转群号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGIDTransGNAsync (CleverQQApiGIDTransGNHttpInput input = null);

        /// <summary>
        /// 群ID转群号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGIDTransGNAsyncWithHttpInfo (CleverQQApiGIDTransGNHttpInput input = null);
        /// <summary>
        /// 群号转群ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGNTransGIDAsync (CleverQQApiGNTransGIDHttpInput input = null);

        /// <summary>
        /// 群号转群ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGNTransGIDAsyncWithHttpInfo (CleverQQApiGNTransGIDHttpInput input = null);
        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetAgeAsync (CleverQQApiGetAgeHttpInput input = null);

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetAgeAsyncWithHttpInfo (CleverQQApiGetAgeHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetBknAsync (CleverQQApiGetBknHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBknAsyncWithHttpInfo (CleverQQApiGetBknHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetBkn32Async (CleverQQApiGetBkn32HttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBkn32AsyncWithHttpInfo (CleverQQApiGetBkn32HttpInput input = null);
        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetBlogPsKeyAsync (CleverQQApiGetBlogPsKeyHttpInput input = null);

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBlogPsKeyAsyncWithHttpInfo (CleverQQApiGetBlogPsKeyHttpInput input = null);
        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetClassRoomPsKeyAsync (CleverQQApiGetClassRoomPsKeyHttpInput input = null);

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetClassRoomPsKeyAsyncWithHttpInfo (CleverQQApiGetClassRoomPsKeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetClientkeyAsync (CleverQQApiGetClientkeyHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetClientkeyAsyncWithHttpInfo (CleverQQApiGetClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的Cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetCookiesAsync (CleverQQApiGetCookiesHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的Cookies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetCookiesAsyncWithHttpInfo (CleverQQApiGetCookiesHttpInput input = null);
        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetDisGroupListAsync (CleverQQApiGetDisGroupListHttpInput input = null);

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetDisGroupListAsyncWithHttpInfo (CleverQQApiGetDisGroupListHttpInput input = null);
        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetDisGroupMemberListAsync (CleverQQApiGetDisGroupMemberListHttpInput input = null);

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetDisGroupMemberListAsyncWithHttpInfo (CleverQQApiGetDisGroupMemberListHttpInput input = null);
        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetEmailAsync (CleverQQApiGetEmailHttpInput input = null);

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetEmailAsyncWithHttpInfo (CleverQQApiGetEmailHttpInput input = null);
        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetExpertDaysAsync (CleverQQApiGetExpertDaysHttpInput input = null);

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetExpertDaysAsyncWithHttpInfo (CleverQQApiGetExpertDaysHttpInput input = null);
        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendListAsync (CleverQQApiGetFriendListHttpInput input = null);

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendListAsyncWithHttpInfo (CleverQQApiGetFriendListHttpInput input = null);
        /// <summary>
        /// 取得好友列表，返回内容#换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendListBAsync (CleverQQApiGetFriendListBHttpInput input = null);

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendListBAsyncWithHttpInfo (CleverQQApiGetFriendListBHttpInput input = null);
        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendsRemarkAsync (CleverQQApiGetFriendsRemarkHttpInput input = null);

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendsRemarkAsyncWithHttpInfo (CleverQQApiGetFriendsRemarkHttpInput input = null);
        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGenderAsync (CleverQQApiGetGenderHttpInput input = null);

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGenderAsyncWithHttpInfo (CleverQQApiGetGenderHttpInput input = null);
        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupAddModeAsync (CleverQQApiGetGroupAddModeHttpInput input = null);

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupAddModeAsyncWithHttpInfo (CleverQQApiGetGroupAddModeHttpInput input = null);
        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupAdminAsync (CleverQQApiGetGroupAdminHttpInput input = null);

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupAdminAsyncWithHttpInfo (CleverQQApiGetGroupAdminHttpInput input = null);
        /// <summary>
        /// 取对象群名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupCardAsync (CleverQQApiGetGroupCardHttpInput input = null);

        /// <summary>
        /// 取对象群名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupCardAsyncWithHttpInfo (CleverQQApiGetGroupCardHttpInput input = null);
        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupChatLvAsync (CleverQQApiGetGroupChatLvHttpInput input = null);

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupChatLvAsyncWithHttpInfo (CleverQQApiGetGroupChatLvHttpInput input = null);
        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListAsync (CleverQQApiGetGroupListHttpInput input = null);

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListAsyncWithHttpInfo (CleverQQApiGetGroupListHttpInput input = null);
        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListAAsync (CleverQQApiGetGroupListAHttpInput input = null);

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListAAsyncWithHttpInfo (CleverQQApiGetGroupListAHttpInput input = null);
        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListBAsync (CleverQQApiGetGroupListBHttpInput input = null);

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListBAsyncWithHttpInfo (CleverQQApiGetGroupListBHttpInput input = null);
        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupLvAsync (CleverQQApiGetGroupLvHttpInput input = null);

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupLvAsyncWithHttpInfo (CleverQQApiGetGroupLvHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListAsync (CleverQQApiGetGroupMemberListHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListAsyncWithHttpInfo (CleverQQApiGetGroupMemberListHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListBAsync (CleverQQApiGetGroupMemberListBHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListBAsyncWithHttpInfo (CleverQQApiGetGroupMemberListBHttpInput input = null);
        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListCAsync (CleverQQApiGetGroupMemberListCHttpInput input = null);

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListCAsyncWithHttpInfo (CleverQQApiGetGroupMemberListCHttpInput input = null);
        /// <summary>
        /// 查询对象群当前人数和上限人数
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberNumAsync (CleverQQApiGetGroupMemberNumHttpInput input = null);

        /// <summary>
        /// 查询对象群当前人数和上限人数
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberNumAsyncWithHttpInfo (CleverQQApiGetGroupMemberNumHttpInput input = null);
        /// <summary>
        /// 取QQ群名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupNameAsync (CleverQQApiGetGroupNameHttpInput input = null);

        /// <summary>
        /// 取QQ群名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupNameAsyncWithHttpInfo (CleverQQApiGetGroupNameHttpInput input = null);
        /// <summary>
        /// 取得QQ群页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupPsKeyAsync (CleverQQApiGetGroupPsKeyHttpInput input = null);

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupPsKeyAsyncWithHttpInfo (CleverQQApiGetGroupPsKeyHttpInput input = null);
        /// <summary>
        /// 取框架日志
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetLogAsync (CleverQQApiGetLogHttpInput input = null);

        /// <summary>
        /// 取框架日志
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLogAsyncWithHttpInfo (CleverQQApiGetLogHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用的长Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetLongClientkeyAsync (CleverQQApiGetLongClientkeyHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLongClientkeyAsyncWithHttpInfo (CleverQQApiGetLongClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器人网页操作用参数长Ldw
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetLongLdwAsync (CleverQQApiGetLongLdwHttpInput input = null);

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLongLdwAsyncWithHttpInfo (CleverQQApiGetLongLdwHttpInput input = null);
        /// <summary>
        /// 取对象昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetNickAsync (CleverQQApiGetNickHttpInput input = null);

        /// <summary>
        /// 取对象昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetNickAsyncWithHttpInfo (CleverQQApiGetNickHttpInput input = null);
        /// <summary>
        /// 取群公告，返回该群最新公告
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetNoticeAsync (CleverQQApiGetNoticeHttpInput input = null);

        /// <summary>
        /// 取群公告，返回该群最新公告
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetNoticeAsyncWithHttpInfo (CleverQQApiGetNoticeHttpInput input = null);
        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetObjInfoAsync (CleverQQApiGetObjInfoHttpInput input = null);

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjInfoAsyncWithHttpInfo (CleverQQApiGetObjInfoHttpInput input = null);
        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetObjLevelAsync (CleverQQApiGetObjLevelHttpInput input = null);

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjLevelAsyncWithHttpInfo (CleverQQApiGetObjLevelHttpInput input = null);
        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetObjVoteAsync (CleverQQApiGetObjVoteHttpInput input = null);

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjVoteAsyncWithHttpInfo (CleverQQApiGetObjVoteHttpInput input = null);
        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetOffLineListAsync (CleverQQApiGetOffLineListHttpInput input = null);

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOffLineListAsyncWithHttpInfo (CleverQQApiGetOffLineListHttpInput input = null);
        /// <summary>
        /// 取框架在线QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetOnLineListAsync (CleverQQApiGetOnLineListHttpInput input = null);

        /// <summary>
        /// 取框架在线QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOnLineListAsyncWithHttpInfo (CleverQQApiGetOnLineListHttpInput input = null);
        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetOnlineStateAsync (CleverQQApiGetOnlineStateHttpInput input = null);

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOnlineStateAsyncWithHttpInfo (CleverQQApiGetOnlineStateHttpInput input = null);
        /// <summary>
        /// 取个人说明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetPerExpAsync (CleverQQApiGetPerExpHttpInput input = null);

        /// <summary>
        /// 取个人说明
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetPerExpAsyncWithHttpInfo (CleverQQApiGetPerExpHttpInput input = null);
        /// <summary>
        /// 根据图片GUID取得图片下载连接
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetPicLinkAsync (CleverQQApiGetPicLinkHttpInput input = null);

        /// <summary>
        /// 根据图片GUID取得图片下载连接
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetPicLinkAsyncWithHttpInfo (CleverQQApiGetPicLinkHttpInput input = null);
        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetQQAddModeAsync (CleverQQApiGetQQAddModeHttpInput input = null);

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQAddModeAsyncWithHttpInfo (CleverQQApiGetQQAddModeHttpInput input = null);
        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetQQAgeAsync (CleverQQApiGetQQAgeHttpInput input = null);

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQAgeAsyncWithHttpInfo (CleverQQApiGetQQAgeHttpInput input = null);
        /// <summary>
        /// 取框架所有QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetQQListAsync (CleverQQApiGetQQListHttpInput input = null);

        /// <summary>
        /// 取框架所有QQ号 换行符分割
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQListAsyncWithHttpInfo (CleverQQApiGetQQListHttpInput input = null);
        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetQidianQQFriendsListAsync (CleverQQApiGetQidianQQFriendsListHttpInput input = null);

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQidianQQFriendsListAsyncWithHttpInfo (CleverQQApiGetQidianQQFriendsListHttpInput input = null);
        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetRInfAsync (CleverQQApiGetRInfHttpInput input = null);

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetRInfAsyncWithHttpInfo (CleverQQApiGetRInfHttpInput input = null);
        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetShieldedStateAsync (CleverQQApiGetShieldedStateHttpInput input = null);

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetShieldedStateAsyncWithHttpInfo (CleverQQApiGetShieldedStateHttpInput input = null);
        /// <summary>
        /// 取个人签名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetSignAsync (CleverQQApiGetSignHttpInput input = null);

        /// <summary>
        /// 取个人签名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetSignAsyncWithHttpInfo (CleverQQApiGetSignHttpInput input = null);
        /// <summary>
        /// 获取当前框架内部时间戳
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetTimeStampAsync (CleverQQApiGetTimeStampHttpInput input = null);

        /// <summary>
        /// 获取当前框架内部时间戳
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetTimeStampAsyncWithHttpInfo (CleverQQApiGetTimeStampHttpInput input = null);
        /// <summary>
        /// 取框架版本号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetVerAsync (CleverQQApiGetVerHttpInput input = null);

        /// <summary>
        /// 取框架版本号
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetVerAsyncWithHttpInfo (CleverQQApiGetVerHttpInput input = null);
        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetVoiLinkAsync (CleverQQApiGetVoiLinkHttpInput input = null);

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetVoiLinkAsyncWithHttpInfo (CleverQQApiGetVoiLinkHttpInput input = null);
        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetWpaAsync (CleverQQApiGetWpaHttpInput input = null);

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetWpaAsyncWithHttpInfo (CleverQQApiGetWpaHttpInput input = null);
        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGetZonePsKeyAsync (CleverQQApiGetZonePsKeyHttpInput input = null);

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetZonePsKeyAsyncWithHttpInfo (CleverQQApiGetZonePsKeyHttpInput input = null);
        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiGiveGiftAsync (CleverQQApiGiveGiftHttpInput input = null);

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGiveGiftAsyncWithHttpInfo (CleverQQApiGiveGiftHttpInput input = null);
        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiHandleEventAsync (CleverQQApiHandleEventHttpInput input = null);

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiHandleEventAsyncWithHttpInfo (CleverQQApiHandleEventHttpInput input = null);
        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiHandleGroupEventAsync (CleverQQApiHandleGroupEventHttpInput input = null);

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiHandleGroupEventAsyncWithHttpInfo (CleverQQApiHandleGroupEventHttpInput input = null);
        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiIfFriendAsync (CleverQQApiIfFriendHttpInput input = null);

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIfFriendAsyncWithHttpInfo (CleverQQApiIfFriendHttpInput input = null);
        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiInviteDisGroupAsync (CleverQQApiInviteDisGroupHttpInput input = null);

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiInviteDisGroupAsyncWithHttpInfo (CleverQQApiInviteDisGroupHttpInput input = null);
        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiIsEnableAsync (CleverQQApiIsEnableHttpInput input = null);

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsEnableAsyncWithHttpInfo (CleverQQApiIsEnableHttpInput input = null);
        /// <summary>
        /// 查询对象是否在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiIsOnlineAsync (CleverQQApiIsOnlineHttpInput input = null);

        /// <summary>
        /// 查询对象是否在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsOnlineAsyncWithHttpInfo (CleverQQApiIsOnlineHttpInput input = null);
        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiIsShutUpAsync (CleverQQApiIsShutUpHttpInput input = null);

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsShutUpAsyncWithHttpInfo (CleverQQApiIsShutUpHttpInput input = null);
        /// <summary>
        /// 申请加群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiJoinGroupAsync (CleverQQApiJoinGroupHttpInput input = null);

        /// <summary>
        /// 申请加群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiJoinGroupAsyncWithHttpInfo (CleverQQApiJoinGroupHttpInput input = null);
        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiKickDisGroupMBRAsync (CleverQQApiKickDisGroupMBRHttpInput input = null);

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiKickDisGroupMBRAsyncWithHttpInfo (CleverQQApiKickDisGroupMBRHttpInput input = null);
        /// <summary>
        /// 将对象移除群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiKickGroupMBRAsync (CleverQQApiKickGroupMBRHttpInput input = null);

        /// <summary>
        /// 将对象移除群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiKickGroupMBRAsyncWithHttpInfo (CleverQQApiKickGroupMBRHttpInput input = null);
        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiLoginQQAsync (CleverQQApiLoginQQHttpInput input = null);

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiLoginQQAsyncWithHttpInfo (CleverQQApiLoginQQHttpInput input = null);
        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiNoAdminInviteGroupAsync (CleverQQApiNoAdminInviteGroupHttpInput input = null);

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiNoAdminInviteGroupAsyncWithHttpInfo (CleverQQApiNoAdminInviteGroupHttpInput input = null);
        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiOffLineQQAsync (CleverQQApiOffLineQQHttpInput input = null);

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiOffLineQQAsyncWithHttpInfo (CleverQQApiOffLineQQHttpInput input = null);
        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiOutPutLogAsync (CleverQQApiOutPutLogHttpInput input = null);

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiOutPutLogAsyncWithHttpInfo (CleverQQApiOutPutLogHttpInput input = null);
        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiPBGroupNoticAsync (CleverQQApiPBGroupNoticHttpInput input = null);

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiPBGroupNoticAsyncWithHttpInfo (CleverQQApiPBGroupNoticHttpInput input = null);
        /// <summary>
        /// QQ群作业发布
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiPBHomeWorkAsync (CleverQQApiPBHomeWorkHttpInput input = null);

        /// <summary>
        /// QQ群作业发布
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiPBHomeWorkAsyncWithHttpInfo (CleverQQApiPBHomeWorkHttpInput input = null);
        /// <summary>
        /// 退出讨论组
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiQuitDisGroupAsync (CleverQQApiQuitDisGroupHttpInput input = null);

        /// <summary>
        /// 退出讨论组
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiQuitDisGroupAsyncWithHttpInfo (CleverQQApiQuitDisGroupHttpInput input = null);
        /// <summary>
        /// 退群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiQuitGroupAsync (CleverQQApiQuitGroupHttpInput input = null);

        /// <summary>
        /// 退群
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiQuitGroupAsyncWithHttpInfo (CleverQQApiQuitGroupHttpInput input = null);
        /// <summary>
        /// 发送JSON结构消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSendJSONAsync (CleverQQApiSendJSONHttpInput input = null);

        /// <summary>
        /// 发送JSON结构消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendJSONAsyncWithHttpInfo (CleverQQApiSendJSONHttpInput input = null);
        /// <summary>
        /// 发送普通文本消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSendMsgAsync (CleverQQApiSendMsgHttpInput input = null);

        /// <summary>
        /// 发送普通文本消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendMsgAsyncWithHttpInfo (CleverQQApiSendMsgHttpInput input = null);
        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSendPackAsync (CleverQQApiSendPackHttpInput input = null);

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendPackAsyncWithHttpInfo (CleverQQApiSendPackHttpInput input = null);
        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSendVoiceAsync (CleverQQApiSendVoiceHttpInput input = null);

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendVoiceAsyncWithHttpInfo (CleverQQApiSendVoiceHttpInput input = null);
        /// <summary>
        /// 发送XML消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSendXMLAsync (CleverQQApiSendXMLHttpInput input = null);

        /// <summary>
        /// 发送XML消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendXMLAsyncWithHttpInfo (CleverQQApiSendXMLHttpInput input = null);
        /// <summary>
        /// 获取会话SessionKey密钥
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSessionKeyAsync (CleverQQApiSessionKeyHttpInput input = null);

        /// <summary>
        /// 获取会话SessionKey密钥
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSessionKeyAsyncWithHttpInfo (CleverQQApiSessionKeyHttpInput input = null);
        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetAdminAsync (CleverQQApiSetAdminHttpInput input = null);

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetAdminAsyncWithHttpInfo (CleverQQApiSetAdminHttpInput input = null);
        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetAnonAsync (CleverQQApiSetAnonHttpInput input = null);

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetAnonAsyncWithHttpInfo (CleverQQApiSetAnonHttpInput input = null);
        /// <summary>
        /// 修改讨论组名称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetDisGroupNameAsync (CleverQQApiSetDisGroupNameHttpInput input = null);

        /// <summary>
        /// 修改讨论组名称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetDisGroupNameAsyncWithHttpInfo (CleverQQApiSetDisGroupNameHttpInput input = null);
        /// <summary>
        /// 修改好友备注姓名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetFriendsRemarkAsync (CleverQQApiSetFriendsRemarkHttpInput input = null);

        /// <summary>
        /// 修改好友备注姓名
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetFriendsRemarkAsyncWithHttpInfo (CleverQQApiSetFriendsRemarkHttpInput input = null);
        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetGroupCardAsync (CleverQQApiSetGroupCardHttpInput input = null);

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetGroupCardAsyncWithHttpInfo (CleverQQApiSetGroupCardHttpInput input = null);
        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetRInfAsync (CleverQQApiSetRInfHttpInput input = null);

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetRInfAsyncWithHttpInfo (CleverQQApiSetRInfHttpInput input = null);
        /// <summary>
        /// 屏蔽或接收某群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSetShieldedGroupAsync (CleverQQApiSetShieldedGroupHttpInput input = null);

        /// <summary>
        /// 屏蔽或接收某群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetShieldedGroupAsyncWithHttpInfo (CleverQQApiSetShieldedGroupHttpInput input = null);
        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiShakeWindowAsync (CleverQQApiShakeWindowHttpInput input = null);

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiShakeWindowAsyncWithHttpInfo (CleverQQApiShakeWindowHttpInput input = null);
        /// <summary>
        /// 群内禁言某人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiShutUPAsync (CleverQQApiShutUPHttpInput input = null);

        /// <summary>
        /// 群内禁言某人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiShutUPAsyncWithHttpInfo (CleverQQApiShutUPHttpInput input = null);
        /// <summary>
        /// QQ群签到（成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiSignInAsync (CleverQQApiSignInHttpInput input = null);

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSignInAsyncWithHttpInfo (CleverQQApiSignInHttpInput input = null);
        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiTakeGiftAsync (CleverQQApiTakeGiftHttpInput input = null);

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTakeGiftAsyncWithHttpInfo (CleverQQApiTakeGiftHttpInput input = null);
        /// <summary>
        /// 腾讯Tea加密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiTea加密Async (CleverQQApiTea加密HttpInput input = null);

        /// <summary>
        /// 腾讯Tea加密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTea加密AsyncWithHttpInfo (CleverQQApiTea加密HttpInput input = null);
        /// <summary>
        /// 腾讯Tea解密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiTea解密Async (CleverQQApiTea解密HttpInput input = null);

        /// <summary>
        /// 腾讯Tea解密
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTea解密AsyncWithHttpInfo (CleverQQApiTea解密HttpInput input = null);
        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiUpLoadPicAsync (CleverQQApiUpLoadPicHttpInput input = null);

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpLoadPicAsyncWithHttpInfo (CleverQQApiUpLoadPicHttpInput input = null);
        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiUpLoadVoiceAsync (CleverQQApiUpLoadVoiceHttpInput input = null);

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpLoadVoiceAsyncWithHttpInfo (CleverQQApiUpLoadVoiceHttpInput input = null);
        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiUpVoteAsync (CleverQQApiUpVoteHttpInput input = null);

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpVoteAsyncWithHttpInfo (CleverQQApiUpVoteHttpInput input = null);
        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1CleverQQApiWithdrawMsgAsync (CleverQQApiWithdrawMsgHttpInput input = null);

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用）
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiWithdrawMsgAsyncWithHttpInfo (CleverQQApiWithdrawMsgHttpInput input = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CleverQQApi : ICleverQQApi
    {
        private Newbe.Mahua.HttpApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CleverQQApi(String basePath)
        {
            this.Configuration = new Newbe.Mahua.HttpApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CleverQQApi(Newbe.Mahua.HttpApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Newbe.Mahua.HttpApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newbe.Mahua.HttpApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newbe.Mahua.HttpApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiAddBkList (CleverQQApiAddBkListHttpInput input = null)
        {
             Apiv1CleverQQApiAddBkListWithHttpInfo(input);
        }

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiAddBkListWithHttpInfo (CleverQQApiAddBkListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AddBkList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAddBkList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiAddBkListAsync (CleverQQApiAddBkListHttpInput input = null)
        {
             await Apiv1CleverQQApiAddBkListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将好友拉入黑名单  成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAddBkListAsyncWithHttpInfo (CleverQQApiAddBkListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AddBkList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAddBkList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiAddQQ (CleverQQApiAddQQHttpInput input = null)
        {
             Apiv1CleverQQApiAddQQWithHttpInfo(input);
        }

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiAddQQWithHttpInfo (CleverQQApiAddQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AddQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAddQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiAddQQAsync (CleverQQApiAddQQHttpInput input = null)
        {
             await Apiv1CleverQQApiAddQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向框架帐号列表增加一个登录QQ 成功失败均返回理由（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAddQQAsyncWithHttpInfo (CleverQQApiAddQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AddQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAddQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiAdminInviteGroup (CleverQQApiAdminInviteGroupHttpInput input = null)
        {
             Apiv1CleverQQApiAdminInviteGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiAdminInviteGroupWithHttpInfo (CleverQQApiAdminInviteGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AdminInviteGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAdminInviteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiAdminInviteGroupAsync (CleverQQApiAdminInviteGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiAdminInviteGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiAdminInviteGroupAsyncWithHttpInfo (CleverQQApiAdminInviteGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_AdminInviteGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiAdminInviteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiBeInput (CleverQQApiBeInputHttpInput input = null)
        {
             Apiv1CleverQQApiBeInputWithHttpInfo(input);
        }

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiBeInputWithHttpInfo (CleverQQApiBeInputHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_BeInput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiBeInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiBeInputAsync (CleverQQApiBeInputHttpInput input = null)
        {
             await Apiv1CleverQQApiBeInputAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 置正在输入状态（发送消息后会打断状态） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiBeInputAsyncWithHttpInfo (CleverQQApiBeInputHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_BeInput";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiBeInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiCheckGift (CleverQQApiCheckGiftHttpInput input = null)
        {
             Apiv1CleverQQApiCheckGiftWithHttpInfo(input);
        }

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiCheckGiftWithHttpInfo (CleverQQApiCheckGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_CheckGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiCheckGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiCheckGiftAsync (CleverQQApiCheckGiftHttpInput input = null)
        {
             await Apiv1CleverQQApiCheckGiftAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询我的群礼物（返回Json格式）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiCheckGiftAsyncWithHttpInfo (CleverQQApiCheckGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_CheckGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiCheckGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiCreateDisGroup (CleverQQApiCreateDisGroupHttpInput input = null)
        {
             Apiv1CleverQQApiCreateDisGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiCreateDisGroupWithHttpInfo (CleverQQApiCreateDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_CreateDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiCreateDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiCreateDisGroupAsync (CleverQQApiCreateDisGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiCreateDisGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiCreateDisGroupAsyncWithHttpInfo (CleverQQApiCreateDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_CreateDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiCreateDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 解除好友黑名单 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiDelBkList (CleverQQApiDelBkListHttpInput input = null)
        {
             Apiv1CleverQQApiDelBkListWithHttpInfo(input);
        }

        /// <summary>
        /// 解除好友黑名单 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiDelBkListWithHttpInfo (CleverQQApiDelBkListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelBkList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelBkList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 解除好友黑名单 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiDelBkListAsync (CleverQQApiDelBkListHttpInput input = null)
        {
             await Apiv1CleverQQApiDelBkListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 解除好友黑名单 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelBkListAsyncWithHttpInfo (CleverQQApiDelBkListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelBkList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelBkList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除好友 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiDelFriend (CleverQQApiDelFriendHttpInput input = null)
        {
             Apiv1CleverQQApiDelFriendWithHttpInfo(input);
        }

        /// <summary>
        /// 删除好友 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiDelFriendWithHttpInfo (CleverQQApiDelFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除好友 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiDelFriendAsync (CleverQQApiDelFriendHttpInput input = null)
        {
             await Apiv1CleverQQApiDelFriendAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 删除好友 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelFriendAsyncWithHttpInfo (CleverQQApiDelFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiDelQQ (CleverQQApiDelQQHttpInput input = null)
        {
             Apiv1CleverQQApiDelQQWithHttpInfo(input);
        }

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiDelQQWithHttpInfo (CleverQQApiDelQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiDelQQAsync (CleverQQApiDelQQHttpInput input = null)
        {
             await Apiv1CleverQQApiDelQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 删除框架帐号列表内指定QQ，不可在执行登录过程中删除QQ否则有几率引起错误（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDelQQAsyncWithHttpInfo (CleverQQApiDelQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DelQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDelQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 请求禁用插件自身 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiDisabledPlugin (CleverQQApiDisabledPluginHttpInput input = null)
        {
             Apiv1CleverQQApiDisabledPluginWithHttpInfo(input);
        }

        /// <summary>
        /// 请求禁用插件自身 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiDisabledPluginWithHttpInfo (CleverQQApiDisabledPluginHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DisabledPlugin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDisabledPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 请求禁用插件自身 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiDisabledPluginAsync (CleverQQApiDisabledPluginHttpInput input = null)
        {
             await Apiv1CleverQQApiDisabledPluginAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 请求禁用插件自身 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiDisabledPluginAsyncWithHttpInfo (CleverQQApiDisabledPluginHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_DisabledPlugin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiDisabledPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群ID转群号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGIDTransGN (CleverQQApiGIDTransGNHttpInput input = null)
        {
             Apiv1CleverQQApiGIDTransGNWithHttpInfo(input);
        }

        /// <summary>
        /// 群ID转群号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGIDTransGNWithHttpInfo (CleverQQApiGIDTransGNHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GIDTransGN";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGIDTransGN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群ID转群号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGIDTransGNAsync (CleverQQApiGIDTransGNHttpInput input = null)
        {
             await Apiv1CleverQQApiGIDTransGNAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 群ID转群号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGIDTransGNAsyncWithHttpInfo (CleverQQApiGIDTransGNHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GIDTransGN";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGIDTransGN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群号转群ID 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGNTransGID (CleverQQApiGNTransGIDHttpInput input = null)
        {
             Apiv1CleverQQApiGNTransGIDWithHttpInfo(input);
        }

        /// <summary>
        /// 群号转群ID 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGNTransGIDWithHttpInfo (CleverQQApiGNTransGIDHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GNTransGID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGNTransGID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群号转群ID 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGNTransGIDAsync (CleverQQApiGNTransGIDHttpInput input = null)
        {
             await Apiv1CleverQQApiGNTransGIDAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 群号转群ID 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGNTransGIDAsyncWithHttpInfo (CleverQQApiGNTransGIDHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GNTransGID";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGNTransGID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetAge (CleverQQApiGetAgeHttpInput input = null)
        {
             Apiv1CleverQQApiGetAgeWithHttpInfo(input);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetAgeWithHttpInfo (CleverQQApiGetAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetAgeAsync (CleverQQApiGetAgeHttpInput input = null)
        {
             await Apiv1CleverQQApiGetAgeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetAgeAsyncWithHttpInfo (CleverQQApiGetAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetBkn (CleverQQApiGetBknHttpInput input = null)
        {
             Apiv1CleverQQApiGetBknWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetBknWithHttpInfo (CleverQQApiGetBknHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBkn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBkn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetBknAsync (CleverQQApiGetBknHttpInput input = null)
        {
             await Apiv1CleverQQApiGetBknAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用参数Bkn或G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBknAsyncWithHttpInfo (CleverQQApiGetBknHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBkn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBkn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetBkn32 (CleverQQApiGetBkn32HttpInput input = null)
        {
             Apiv1CleverQQApiGetBkn32WithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetBkn32WithHttpInfo (CleverQQApiGetBkn32HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBkn32";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBkn32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetBkn32Async (CleverQQApiGetBkn32HttpInput input = null)
        {
             await Apiv1CleverQQApiGetBkn32AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用参数长Bkn或长G_tk 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBkn32AsyncWithHttpInfo (CleverQQApiGetBkn32HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBkn32";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBkn32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetBlogPsKey (CleverQQApiGetBlogPsKeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetBlogPsKeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetBlogPsKeyWithHttpInfo (CleverQQApiGetBlogPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBlogPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBlogPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetBlogPsKeyAsync (CleverQQApiGetBlogPsKeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetBlogPsKeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得腾讯微博页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetBlogPsKeyAsyncWithHttpInfo (CleverQQApiGetBlogPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetBlogPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetBlogPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetClassRoomPsKey (CleverQQApiGetClassRoomPsKeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetClassRoomPsKeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetClassRoomPsKeyWithHttpInfo (CleverQQApiGetClassRoomPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetClassRoomPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetClassRoomPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetClassRoomPsKeyAsync (CleverQQApiGetClassRoomPsKeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetClassRoomPsKeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得腾讯课堂页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetClassRoomPsKeyAsyncWithHttpInfo (CleverQQApiGetClassRoomPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetClassRoomPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetClassRoomPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetClientkey (CleverQQApiGetClientkeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetClientkeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用的Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetClientkeyWithHttpInfo (CleverQQApiGetClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetClientkeyAsync (CleverQQApiGetClientkeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetClientkeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用的Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetClientkeyAsyncWithHttpInfo (CleverQQApiGetClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的Cookies 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetCookies (CleverQQApiGetCookiesHttpInput input = null)
        {
             Apiv1CleverQQApiGetCookiesWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用的Cookies 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetCookiesWithHttpInfo (CleverQQApiGetCookiesHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetCookies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetCookies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的Cookies 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetCookiesAsync (CleverQQApiGetCookiesHttpInput input = null)
        {
             await Apiv1CleverQQApiGetCookiesAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用的Cookies 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetCookiesAsyncWithHttpInfo (CleverQQApiGetCookiesHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetCookies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetCookies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetDisGroupList (CleverQQApiGetDisGroupListHttpInput input = null)
        {
             Apiv1CleverQQApiGetDisGroupListWithHttpInfo(input);
        }

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetDisGroupListWithHttpInfo (CleverQQApiGetDisGroupListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetDisGroupList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetDisGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetDisGroupListAsync (CleverQQApiGetDisGroupListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetDisGroupListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取出讨论组列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetDisGroupListAsyncWithHttpInfo (CleverQQApiGetDisGroupListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetDisGroupList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetDisGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetDisGroupMemberList (CleverQQApiGetDisGroupMemberListHttpInput input = null)
        {
             Apiv1CleverQQApiGetDisGroupMemberListWithHttpInfo(input);
        }

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetDisGroupMemberListWithHttpInfo (CleverQQApiGetDisGroupMemberListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetDisGroupMemberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetDisGroupMemberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetDisGroupMemberListAsync (CleverQQApiGetDisGroupMemberListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetDisGroupMemberListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取出讨论组成员列表 （返回格式为 换行符分割开的） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetDisGroupMemberListAsyncWithHttpInfo (CleverQQApiGetDisGroupMemberListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetDisGroupMemberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetDisGroupMemberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetEmail (CleverQQApiGetEmailHttpInput input = null)
        {
             Apiv1CleverQQApiGetEmailWithHttpInfo(input);
        }

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetEmailWithHttpInfo (CleverQQApiGetEmailHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetEmailAsync (CleverQQApiGetEmailHttpInput input = null)
        {
             await Apiv1CleverQQApiGetEmailAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取邮箱，获取对象QQ资料内邮箱栏为邮箱时返回 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetEmailAsyncWithHttpInfo (CleverQQApiGetEmailHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetExpertDays (CleverQQApiGetExpertDaysHttpInput input = null)
        {
             Apiv1CleverQQApiGetExpertDaysWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetExpertDaysWithHttpInfo (CleverQQApiGetExpertDaysHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetExpertDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetExpertDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetExpertDaysAsync (CleverQQApiGetExpertDaysHttpInput input = null)
        {
             await Apiv1CleverQQApiGetExpertDaysAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象或自身QQ达人天数（返回实际天数 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetExpertDaysAsyncWithHttpInfo (CleverQQApiGetExpertDaysHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetExpertDays";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetExpertDays", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetFriendList (CleverQQApiGetFriendListHttpInput input = null)
        {
             Apiv1CleverQQApiGetFriendListWithHttpInfo(input);
        }

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetFriendListWithHttpInfo (CleverQQApiGetFriendListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendListAsync (CleverQQApiGetFriendListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetFriendListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得好友列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendListAsyncWithHttpInfo (CleverQQApiGetFriendListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetFriendListB (CleverQQApiGetFriendListBHttpInput input = null)
        {
             Apiv1CleverQQApiGetFriendListBWithHttpInfo(input);
        }

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetFriendListBWithHttpInfo (CleverQQApiGetFriendListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendListBAsync (CleverQQApiGetFriendListBHttpInput input = null)
        {
             await Apiv1CleverQQApiGetFriendListBAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得好友列表，返回内容#换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendListBAsyncWithHttpInfo (CleverQQApiGetFriendListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetFriendsRemark (CleverQQApiGetFriendsRemarkHttpInput input = null)
        {
             Apiv1CleverQQApiGetFriendsRemarkWithHttpInfo(input);
        }

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetFriendsRemarkWithHttpInfo (CleverQQApiGetFriendsRemarkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendsRemark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendsRemark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetFriendsRemarkAsync (CleverQQApiGetFriendsRemarkHttpInput input = null)
        {
             await Apiv1CleverQQApiGetFriendsRemarkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取好友备注姓名（成功返回备注，失败或无备注返回空）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetFriendsRemarkAsyncWithHttpInfo (CleverQQApiGetFriendsRemarkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetFriendsRemark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetFriendsRemark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGender (CleverQQApiGetGenderHttpInput input = null)
        {
             Apiv1CleverQQApiGetGenderWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGenderWithHttpInfo (CleverQQApiGetGenderHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGenderAsync (CleverQQApiGetGenderHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGenderAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象性别 1男 2女  未知或失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGenderAsyncWithHttpInfo (CleverQQApiGetGenderHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupAddMode (CleverQQApiGetGroupAddModeHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupAddModeWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupAddModeWithHttpInfo (CleverQQApiGetGroupAddModeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupAddMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupAddMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupAddModeAsync (CleverQQApiGetGroupAddModeHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupAddModeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象群验证方式 1允许任何人 2需要验证消息 3不允许任何人加群 4需要正确回答问题 5需要回答问题并由管理员审核 6付费群 -1群号不存在（获取失败返回空）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupAddModeAsyncWithHttpInfo (CleverQQApiGetGroupAddModeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupAddMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupAddMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupAdmin (CleverQQApiGetGroupAdminHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupAdminWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupAdminWithHttpInfo (CleverQQApiGetGroupAdminHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupAdminAsync (CleverQQApiGetGroupAdminHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupAdminAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群管理，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupAdminAsyncWithHttpInfo (CleverQQApiGetGroupAdminHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象群名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupCard (CleverQQApiGetGroupCardHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupCardWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象群名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupCardWithHttpInfo (CleverQQApiGetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象群名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupCardAsync (CleverQQApiGetGroupCardHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupCardAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象群名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupCardAsyncWithHttpInfo (CleverQQApiGetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupChatLv (CleverQQApiGetGroupChatLvHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupChatLvWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupChatLvWithHttpInfo (CleverQQApiGetGroupChatLvHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupChatLv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupChatLv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupChatLvAsync (CleverQQApiGetGroupChatLvHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupChatLvAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象或自身群聊等级（返回实际等级 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupChatLvAsyncWithHttpInfo (CleverQQApiGetGroupChatLvHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupChatLv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupChatLv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupList (CleverQQApiGetGroupListHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupListWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupListWithHttpInfo (CleverQQApiGetGroupListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListAsync (CleverQQApiGetGroupListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListAsyncWithHttpInfo (CleverQQApiGetGroupListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupListA (CleverQQApiGetGroupListAHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupListAWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupListAWithHttpInfo (CleverQQApiGetGroupListAHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList_A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupListA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListAAsync (CleverQQApiGetGroupListAHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupListAAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群列表，#换行符分割 不受最高获取500群限制（如需获取群名称请对应调用 Api_GetGroupName 理论群名获取不会频繁） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListAAsyncWithHttpInfo (CleverQQApiGetGroupListAHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList_A";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupListA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupListB (CleverQQApiGetGroupListBHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupListBWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupListBWithHttpInfo (CleverQQApiGetGroupListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupListBAsync (CleverQQApiGetGroupListBHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupListBAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群列表，返回获取到的原始JSON格式信息，需自行解析 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupListBAsyncWithHttpInfo (CleverQQApiGetGroupListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupLv (CleverQQApiGetGroupLvHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupLvWithHttpInfo(input);
        }

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupLvWithHttpInfo (CleverQQApiGetGroupLvHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupLv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupLv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupLvAsync (CleverQQApiGetGroupLvHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupLvAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询QQ群等级，成功返回等级（失败返回-1）Pro版可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupLvAsyncWithHttpInfo (CleverQQApiGetGroupLvHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupLv";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupLv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupMemberList (CleverQQApiGetGroupMemberListHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupMemberListWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListWithHttpInfo (CleverQQApiGetGroupMemberListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListAsync (CleverQQApiGetGroupMemberListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupMemberListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListAsyncWithHttpInfo (CleverQQApiGetGroupMemberListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupMemberListB (CleverQQApiGetGroupMemberListBHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupMemberListBWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListBWithHttpInfo (CleverQQApiGetGroupMemberListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListBAsync (CleverQQApiGetGroupMemberListBHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupMemberListBAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群成员列表，返回QQ号和身份Json格式信息 失败返回空（无群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListBAsyncWithHttpInfo (CleverQQApiGetGroupMemberListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList_B";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupMemberListC (CleverQQApiGetGroupMemberListCHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupMemberListCWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberListCWithHttpInfo (CleverQQApiGetGroupMemberListCHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList_C";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberListC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberListCAsync (CleverQQApiGetGroupMemberListCHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupMemberListCAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得群成员列表，返回获取到的原始JSON格式信息，需自行解析（有群员昵称） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberListCAsyncWithHttpInfo (CleverQQApiGetGroupMemberListCHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberList_C";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberListC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象群当前人数和上限人数 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupMemberNum (CleverQQApiGetGroupMemberNumHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupMemberNumWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象群当前人数和上限人数 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupMemberNumWithHttpInfo (CleverQQApiGetGroupMemberNumHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberNum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberNum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象群当前人数和上限人数 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupMemberNumAsync (CleverQQApiGetGroupMemberNumHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupMemberNumAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象群当前人数和上限人数 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupMemberNumAsyncWithHttpInfo (CleverQQApiGetGroupMemberNumHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupMemberNum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupMemberNum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取QQ群名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupName (CleverQQApiGetGroupNameHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupNameWithHttpInfo(input);
        }

        /// <summary>
        /// 取QQ群名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupNameWithHttpInfo (CleverQQApiGetGroupNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取QQ群名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupNameAsync (CleverQQApiGetGroupNameHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupNameAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取QQ群名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupNameAsyncWithHttpInfo (CleverQQApiGetGroupNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetGroupPsKey (CleverQQApiGetGroupPsKeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetGroupPsKeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetGroupPsKeyWithHttpInfo (CleverQQApiGetGroupPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetGroupPsKeyAsync (CleverQQApiGetGroupPsKeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetGroupPsKeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得QQ群页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetGroupPsKeyAsyncWithHttpInfo (CleverQQApiGetGroupPsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetGroupPsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetGroupPsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架日志 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetLog (CleverQQApiGetLogHttpInput input = null)
        {
             Apiv1CleverQQApiGetLogWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架日志 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetLogWithHttpInfo (CleverQQApiGetLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架日志 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetLogAsync (CleverQQApiGetLogHttpInput input = null)
        {
             await Apiv1CleverQQApiGetLogAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架日志 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLogAsyncWithHttpInfo (CleverQQApiGetLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetLongClientkey (CleverQQApiGetLongClientkeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetLongClientkeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetLongClientkeyWithHttpInfo (CleverQQApiGetLongClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLongClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLongClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetLongClientkeyAsync (CleverQQApiGetLongClientkeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetLongClientkeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用的长Clientkey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLongClientkeyAsyncWithHttpInfo (CleverQQApiGetLongClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLongClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLongClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetLongLdw (CleverQQApiGetLongLdwHttpInput input = null)
        {
             Apiv1CleverQQApiGetLongLdwWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetLongLdwWithHttpInfo (CleverQQApiGetLongLdwHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLongLdw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLongLdw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetLongLdwAsync (CleverQQApiGetLongLdwHttpInput input = null)
        {
             await Apiv1CleverQQApiGetLongLdwAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器人网页操作用参数长Ldw 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetLongLdwAsyncWithHttpInfo (CleverQQApiGetLongLdwHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetLongLdw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetLongLdw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetNick (CleverQQApiGetNickHttpInput input = null)
        {
             Apiv1CleverQQApiGetNickWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetNickWithHttpInfo (CleverQQApiGetNickHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetNick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetNick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetNickAsync (CleverQQApiGetNickHttpInput input = null)
        {
             await Apiv1CleverQQApiGetNickAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetNickAsyncWithHttpInfo (CleverQQApiGetNickHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetNick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetNick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群公告，返回该群最新公告 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetNotice (CleverQQApiGetNoticeHttpInput input = null)
        {
             Apiv1CleverQQApiGetNoticeWithHttpInfo(input);
        }

        /// <summary>
        /// 取群公告，返回该群最新公告 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetNoticeWithHttpInfo (CleverQQApiGetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群公告，返回该群最新公告 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetNoticeAsync (CleverQQApiGetNoticeHttpInput input = null)
        {
             await Apiv1CleverQQApiGetNoticeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取群公告，返回该群最新公告 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetNoticeAsyncWithHttpInfo (CleverQQApiGetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetObjInfo (CleverQQApiGetObjInfoHttpInput input = null)
        {
             Apiv1CleverQQApiGetObjInfoWithHttpInfo(input);
        }

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetObjInfoWithHttpInfo (CleverQQApiGetObjInfoHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetObjInfoAsync (CleverQQApiGetObjInfoHttpInput input = null)
        {
             await Apiv1CleverQQApiGetObjInfoAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取对象资料 此方式为http，调用时应自行注意控制频率（成功返回JSON格式自行解析） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjInfoAsyncWithHttpInfo (CleverQQApiGetObjInfoHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetObjLevel (CleverQQApiGetObjLevelHttpInput input = null)
        {
             Apiv1CleverQQApiGetObjLevelWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetObjLevelWithHttpInfo (CleverQQApiGetObjLevelHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetObjLevelAsync (CleverQQApiGetObjLevelHttpInput input = null)
        {
             await Apiv1CleverQQApiGetObjLevelAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象QQ等级 成功返回等级  失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjLevelAsyncWithHttpInfo (CleverQQApiGetObjLevelHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetObjVote (CleverQQApiGetObjVoteHttpInput input = null)
        {
             Apiv1CleverQQApiGetObjVoteWithHttpInfo(input);
        }

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetObjVoteWithHttpInfo (CleverQQApiGetObjVoteHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjVote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetObjVoteAsync (CleverQQApiGetObjVoteHttpInput input = null)
        {
             await Apiv1CleverQQApiGetObjVoteAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取对象当前赞数量 失败返回-1   成功返回赞数 （获取频繁会出现失败现象，请自行写判断处理失败问题） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetObjVoteAsyncWithHttpInfo (CleverQQApiGetObjVoteHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetObjVote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetObjVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetOffLineList (CleverQQApiGetOffLineListHttpInput input = null)
        {
             Apiv1CleverQQApiGetOffLineListWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetOffLineListWithHttpInfo (CleverQQApiGetOffLineListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOffLineList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOffLineList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetOffLineListAsync (CleverQQApiGetOffLineListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetOffLineListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架离线QQ号 （Pro版可用）换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOffLineListAsyncWithHttpInfo (CleverQQApiGetOffLineListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOffLineList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOffLineList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架在线QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetOnLineList (CleverQQApiGetOnLineListHttpInput input = null)
        {
             Apiv1CleverQQApiGetOnLineListWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架在线QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetOnLineListWithHttpInfo (CleverQQApiGetOnLineListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOnLineList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOnLineList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架在线QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetOnLineListAsync (CleverQQApiGetOnLineListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetOnLineListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架在线QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOnLineListAsyncWithHttpInfo (CleverQQApiGetOnLineListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOnLineList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOnLineList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetOnlineState (CleverQQApiGetOnlineStateHttpInput input = null)
        {
             Apiv1CleverQQApiGetOnlineStateWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetOnlineStateWithHttpInfo (CleverQQApiGetOnlineStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOnlineState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOnlineState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetOnlineStateAsync (CleverQQApiGetOnlineStateHttpInput input = null)
        {
             await Apiv1CleverQQApiGetOnlineStateAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象在线状态   返回 1、在线 2、Q我 3、离开 4、忙碌 5、勿扰 6、隐身或离线（Pro可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetOnlineStateAsyncWithHttpInfo (CleverQQApiGetOnlineStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetOnlineState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetOnlineState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人说明 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetPerExp (CleverQQApiGetPerExpHttpInput input = null)
        {
             Apiv1CleverQQApiGetPerExpWithHttpInfo(input);
        }

        /// <summary>
        /// 取个人说明 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetPerExpWithHttpInfo (CleverQQApiGetPerExpHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetPerExp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetPerExp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人说明 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetPerExpAsync (CleverQQApiGetPerExpHttpInput input = null)
        {
             await Apiv1CleverQQApiGetPerExpAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取个人说明 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetPerExpAsyncWithHttpInfo (CleverQQApiGetPerExpHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetPerExp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetPerExp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetPicLink (CleverQQApiGetPicLinkHttpInput input = null)
        {
             Apiv1CleverQQApiGetPicLinkWithHttpInfo(input);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetPicLinkWithHttpInfo (CleverQQApiGetPicLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetPicLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetPicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetPicLinkAsync (CleverQQApiGetPicLinkHttpInput input = null)
        {
             await Apiv1CleverQQApiGetPicLinkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetPicLinkAsyncWithHttpInfo (CleverQQApiGetPicLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetPicLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetPicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetQQAddMode (CleverQQApiGetQQAddModeHttpInput input = null)
        {
             Apiv1CleverQQApiGetQQAddModeWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetQQAddModeWithHttpInfo (CleverQQApiGetQQAddModeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQAddMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQAddMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetQQAddModeAsync (CleverQQApiGetQQAddModeHttpInput input = null)
        {
             await Apiv1CleverQQApiGetQQAddModeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象好友添加验证方式 （00 允许任何人  01 需要身份验证  03 需回答正确问题  04 需回答问题  99 已经是好友） （Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQAddModeAsyncWithHttpInfo (CleverQQApiGetQQAddModeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQAddMode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQAddMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetQQAge (CleverQQApiGetQQAgeHttpInput input = null)
        {
             Apiv1CleverQQApiGetQQAgeWithHttpInfo(input);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetQQAgeWithHttpInfo (CleverQQApiGetQQAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetQQAgeAsync (CleverQQApiGetQQAgeHttpInput input = null)
        {
             await Apiv1CleverQQApiGetQQAgeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQAgeAsyncWithHttpInfo (CleverQQApiGetQQAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架所有QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetQQList (CleverQQApiGetQQListHttpInput input = null)
        {
             Apiv1CleverQQApiGetQQListWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架所有QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetQQListWithHttpInfo (CleverQQApiGetQQListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架所有QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetQQListAsync (CleverQQApiGetQQListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetQQListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架所有QQ号 换行符分割 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQQListAsyncWithHttpInfo (CleverQQApiGetQQListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQQList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQQList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetQidianQQFriendsList (CleverQQApiGetQidianQQFriendsListHttpInput input = null)
        {
             Apiv1CleverQQApiGetQidianQQFriendsListWithHttpInfo(input);
        }

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetQidianQQFriendsListWithHttpInfo (CleverQQApiGetQidianQQFriendsListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQidianQQFriendsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQidianQQFriendsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetQidianQQFriendsListAsync (CleverQQApiGetQidianQQFriendsListHttpInput input = null)
        {
             await Apiv1CleverQQApiGetQidianQQFriendsListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得企点QQ外部联系人好友列表  成功返回Json列表 失败或无返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetQidianQQFriendsListAsyncWithHttpInfo (CleverQQApiGetQidianQQFriendsListHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetQidianQQFriendsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetQidianQQFriendsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetRInf (CleverQQApiGetRInfHttpInput input = null)
        {
             Apiv1CleverQQApiGetRInfWithHttpInfo(input);
        }

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetRInfWithHttpInfo (CleverQQApiGetRInfHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetRInf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetRInf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetRInfAsync (CleverQQApiGetRInfHttpInput input = null)
        {
             await Apiv1CleverQQApiGetRInfAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取机器人状态信息，成功返回：昵称、帐号、在线状态、速度、收信、发信、在线时间，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetRInfAsyncWithHttpInfo (CleverQQApiGetRInfHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetRInf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetRInf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetShieldedState (CleverQQApiGetShieldedStateHttpInput input = null)
        {
             Apiv1CleverQQApiGetShieldedStateWithHttpInfo(input);
        }

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetShieldedStateWithHttpInfo (CleverQQApiGetShieldedStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetShieldedState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetShieldedState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetShieldedStateAsync (CleverQQApiGetShieldedStateHttpInput input = null)
        {
             await Apiv1CleverQQApiGetShieldedStateAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取机器人QQ是否被屏蔽消息发送状态（真屏蔽 假未屏蔽） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetShieldedStateAsyncWithHttpInfo (CleverQQApiGetShieldedStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetShieldedState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetShieldedState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人签名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetSign (CleverQQApiGetSignHttpInput input = null)
        {
             Apiv1CleverQQApiGetSignWithHttpInfo(input);
        }

        /// <summary>
        /// 取个人签名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetSignWithHttpInfo (CleverQQApiGetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人签名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetSignAsync (CleverQQApiGetSignHttpInput input = null)
        {
             await Apiv1CleverQQApiGetSignAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取个人签名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetSignAsyncWithHttpInfo (CleverQQApiGetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取当前框架内部时间戳 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetTimeStamp (CleverQQApiGetTimeStampHttpInput input = null)
        {
             Apiv1CleverQQApiGetTimeStampWithHttpInfo(input);
        }

        /// <summary>
        /// 获取当前框架内部时间戳 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetTimeStampWithHttpInfo (CleverQQApiGetTimeStampHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetTimeStamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetTimeStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取当前框架内部时间戳 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetTimeStampAsync (CleverQQApiGetTimeStampHttpInput input = null)
        {
             await Apiv1CleverQQApiGetTimeStampAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取当前框架内部时间戳 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetTimeStampAsyncWithHttpInfo (CleverQQApiGetTimeStampHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetTimeStamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetTimeStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetVer (CleverQQApiGetVerHttpInput input = null)
        {
             Apiv1CleverQQApiGetVerWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架版本号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetVerWithHttpInfo (CleverQQApiGetVerHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetVer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetVer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetVerAsync (CleverQQApiGetVerHttpInput input = null)
        {
             await Apiv1CleverQQApiGetVerAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架版本号 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetVerAsyncWithHttpInfo (CleverQQApiGetVerHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetVer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetVer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetVoiLink (CleverQQApiGetVoiLinkHttpInput input = null)
        {
             Apiv1CleverQQApiGetVoiLinkWithHttpInfo(input);
        }

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetVoiLinkWithHttpInfo (CleverQQApiGetVoiLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetVoiLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetVoiLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetVoiLinkAsync (CleverQQApiGetVoiLinkHttpInput input = null)
        {
             await Apiv1CleverQQApiGetVoiLinkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过语音GUID获取下载连接 失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetVoiLinkAsyncWithHttpInfo (CleverQQApiGetVoiLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetVoiLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetVoiLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetWpa (CleverQQApiGetWpaHttpInput input = null)
        {
             Apiv1CleverQQApiGetWpaWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetWpaWithHttpInfo (CleverQQApiGetWpaHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetWpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetWpa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetWpaAsync (CleverQQApiGetWpaHttpInput input = null)
        {
             await Apiv1CleverQQApiGetWpaAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对方是否允许在线状态临时会话消息（非讨论组和群临时）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetWpaAsyncWithHttpInfo (CleverQQApiGetWpaHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetWpa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetWpa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGetZonePsKey (CleverQQApiGetZonePsKeyHttpInput input = null)
        {
             Apiv1CleverQQApiGetZonePsKeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGetZonePsKeyWithHttpInfo (CleverQQApiGetZonePsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetZonePsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetZonePsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGetZonePsKeyAsync (CleverQQApiGetZonePsKeyHttpInput input = null)
        {
             await Apiv1CleverQQApiGetZonePsKeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得QQ空间页面操作用参数P_skey 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGetZonePsKeyAsyncWithHttpInfo (CleverQQApiGetZonePsKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GetZonePsKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGetZonePsKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiGiveGift (CleverQQApiGiveGiftHttpInput input = null)
        {
             Apiv1CleverQQApiGiveGiftWithHttpInfo(input);
        }

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiGiveGiftWithHttpInfo (CleverQQApiGiveGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GiveGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGiveGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiGiveGiftAsync (CleverQQApiGiveGiftHttpInput input = null)
        {
             await Apiv1CleverQQApiGiveGiftAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 送群礼物（成功返回1 失败返回-1）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiGiveGiftAsyncWithHttpInfo (CleverQQApiGiveGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_GiveGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiGiveGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiHandleEvent (CleverQQApiHandleEventHttpInput input = null)
        {
             Apiv1CleverQQApiHandleEventWithHttpInfo(input);
        }

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiHandleEventWithHttpInfo (CleverQQApiHandleEventHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_HandleEvent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiHandleEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiHandleEventAsync (CleverQQApiHandleEventHttpInput input = null)
        {
             await Apiv1CleverQQApiHandleEventAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 某人申请入群 添加好友 被邀请入群 请求处理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiHandleEventAsyncWithHttpInfo (CleverQQApiHandleEventHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_HandleEvent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiHandleEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiHandleGroupEvent (CleverQQApiHandleGroupEventHttpInput input = null)
        {
             Apiv1CleverQQApiHandleGroupEventWithHttpInfo(input);
        }

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiHandleGroupEventWithHttpInfo (CleverQQApiHandleGroupEventHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_HandleGroupEvent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiHandleGroupEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiHandleGroupEventAsync (CleverQQApiHandleGroupEventHttpInput input = null)
        {
             await Apiv1CleverQQApiHandleGroupEventAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiHandleGroupEventAsyncWithHttpInfo (CleverQQApiHandleGroupEventHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_HandleGroupEvent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiHandleGroupEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiIfFriend (CleverQQApiIfFriendHttpInput input = null)
        {
             Apiv1CleverQQApiIfFriendWithHttpInfo(input);
        }

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiIfFriendWithHttpInfo (CleverQQApiIfFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IfFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIfFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiIfFriendAsync (CleverQQApiIfFriendHttpInput input = null)
        {
             await Apiv1CleverQQApiIfFriendAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 是否QQ好友 好友返回真 非好友或获取失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIfFriendAsyncWithHttpInfo (CleverQQApiIfFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IfFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIfFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiInviteDisGroup (CleverQQApiInviteDisGroupHttpInput input = null)
        {
             Apiv1CleverQQApiInviteDisGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiInviteDisGroupWithHttpInfo (CleverQQApiInviteDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_InviteDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiInviteDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiInviteDisGroupAsync (CleverQQApiInviteDisGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiInviteDisGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiInviteDisGroupAsyncWithHttpInfo (CleverQQApiInviteDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_InviteDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiInviteDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiIsEnable (CleverQQApiIsEnableHttpInput input = null)
        {
             Apiv1CleverQQApiIsEnableWithHttpInfo(input);
        }

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiIsEnableWithHttpInfo (CleverQQApiIsEnableHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsEnable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiIsEnableAsync (CleverQQApiIsEnableHttpInput input = null)
        {
             await Apiv1CleverQQApiIsEnableAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得插件自身启用状态，启用真 禁用假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsEnableAsyncWithHttpInfo (CleverQQApiIsEnableHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsEnable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象是否在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiIsOnline (CleverQQApiIsOnlineHttpInput input = null)
        {
             Apiv1CleverQQApiIsOnlineWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象是否在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiIsOnlineWithHttpInfo (CleverQQApiIsOnlineHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsOnline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象是否在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiIsOnlineAsync (CleverQQApiIsOnlineHttpInput input = null)
        {
             await Apiv1CleverQQApiIsOnlineAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象是否在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsOnlineAsyncWithHttpInfo (CleverQQApiIsOnlineHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsOnline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiIsShutUp (CleverQQApiIsShutUpHttpInput input = null)
        {
             Apiv1CleverQQApiIsShutUpWithHttpInfo(input);
        }

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiIsShutUpWithHttpInfo (CleverQQApiIsShutUpHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsShutUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsShutUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiIsShutUpAsync (CleverQQApiIsShutUpHttpInput input = null)
        {
             await Apiv1CleverQQApiIsShutUpAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 查询对象或自己是否被禁言  禁言返回真 失败或未禁言返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiIsShutUpAsyncWithHttpInfo (CleverQQApiIsShutUpHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_IsShutUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiIsShutUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 申请加群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiJoinGroup (CleverQQApiJoinGroupHttpInput input = null)
        {
             Apiv1CleverQQApiJoinGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 申请加群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiJoinGroupWithHttpInfo (CleverQQApiJoinGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_JoinGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiJoinGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 申请加群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiJoinGroupAsync (CleverQQApiJoinGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiJoinGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 申请加群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiJoinGroupAsyncWithHttpInfo (CleverQQApiJoinGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_JoinGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiJoinGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiKickDisGroupMBR (CleverQQApiKickDisGroupMBRHttpInput input = null)
        {
             Apiv1CleverQQApiKickDisGroupMBRWithHttpInfo(input);
        }

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiKickDisGroupMBRWithHttpInfo (CleverQQApiKickDisGroupMBRHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_KickDisGroupMBR";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiKickDisGroupMBR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiKickDisGroupMBRAsync (CleverQQApiKickDisGroupMBRHttpInput input = null)
        {
             await Apiv1CleverQQApiKickDisGroupMBRAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将对象移除讨论组 成功返回空 失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiKickDisGroupMBRAsyncWithHttpInfo (CleverQQApiKickDisGroupMBRHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_KickDisGroupMBR";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiKickDisGroupMBR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiKickGroupMBR (CleverQQApiKickGroupMBRHttpInput input = null)
        {
             Apiv1CleverQQApiKickGroupMBRWithHttpInfo(input);
        }

        /// <summary>
        /// 将对象移除群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiKickGroupMBRWithHttpInfo (CleverQQApiKickGroupMBRHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_KickGroupMBR";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiKickGroupMBR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiKickGroupMBRAsync (CleverQQApiKickGroupMBRHttpInput input = null)
        {
             await Apiv1CleverQQApiKickGroupMBRAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将对象移除群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiKickGroupMBRAsyncWithHttpInfo (CleverQQApiKickGroupMBRHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_KickGroupMBR";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiKickGroupMBR", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiLoginQQ (CleverQQApiLoginQQHttpInput input = null)
        {
             Apiv1CleverQQApiLoginQQWithHttpInfo(input);
        }

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiLoginQQWithHttpInfo (CleverQQApiLoginQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_LoginQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiLoginQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiLoginQQAsync (CleverQQApiLoginQQHttpInput input = null)
        {
             await Apiv1CleverQQApiLoginQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 登录指定QQ，应确保QQ号码在列表中已存在 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiLoginQQAsyncWithHttpInfo (CleverQQApiLoginQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_LoginQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiLoginQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiNoAdminInviteGroup (CleverQQApiNoAdminInviteGroupHttpInput input = null)
        {
             Apiv1CleverQQApiNoAdminInviteGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiNoAdminInviteGroupWithHttpInfo (CleverQQApiNoAdminInviteGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_NoAdminInviteGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiNoAdminInviteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiNoAdminInviteGroupAsync (CleverQQApiNoAdminInviteGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiNoAdminInviteGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 非管理员邀请对象入群，频率过快会失败 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiNoAdminInviteGroupAsyncWithHttpInfo (CleverQQApiNoAdminInviteGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_NoAdminInviteGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiNoAdminInviteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiOffLineQQ (CleverQQApiOffLineQQHttpInput input = null)
        {
             Apiv1CleverQQApiOffLineQQWithHttpInfo(input);
        }

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiOffLineQQWithHttpInfo (CleverQQApiOffLineQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_OffLineQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiOffLineQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiOffLineQQAsync (CleverQQApiOffLineQQHttpInput input = null)
        {
             await Apiv1CleverQQApiOffLineQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 令指定QQ下线，应确保QQ号码已在列表中且在线 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiOffLineQQAsyncWithHttpInfo (CleverQQApiOffLineQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_OffLineQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiOffLineQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiOutPutLog (CleverQQApiOutPutLogHttpInput input = null)
        {
             Apiv1CleverQQApiOutPutLogWithHttpInfo(input);
        }

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiOutPutLogWithHttpInfo (CleverQQApiOutPutLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_OutPutLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiOutPutLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiOutPutLogAsync (CleverQQApiOutPutLogHttpInput input = null)
        {
             await Apiv1CleverQQApiOutPutLogAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向CleverQQ日志窗口发送一条本插件的日志，可用于调试输出需要的内容，或定位插件错误与运行状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiOutPutLogAsyncWithHttpInfo (CleverQQApiOutPutLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_OutPutLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiOutPutLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiPBGroupNotic (CleverQQApiPBGroupNoticHttpInput input = null)
        {
             Apiv1CleverQQApiPBGroupNoticWithHttpInfo(input);
        }

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiPBGroupNoticWithHttpInfo (CleverQQApiPBGroupNoticHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_PBGroupNotic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiPBGroupNotic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiPBGroupNoticAsync (CleverQQApiPBGroupNoticHttpInput input = null)
        {
             await Apiv1CleverQQApiPBGroupNoticAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发布群公告（成功返回真，失败返回假），调用此API应保证响应QQ为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiPBGroupNoticAsyncWithHttpInfo (CleverQQApiPBGroupNoticHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_PBGroupNotic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiPBGroupNotic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// QQ群作业发布 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiPBHomeWork (CleverQQApiPBHomeWorkHttpInput input = null)
        {
             Apiv1CleverQQApiPBHomeWorkWithHttpInfo(input);
        }

        /// <summary>
        /// QQ群作业发布 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiPBHomeWorkWithHttpInfo (CleverQQApiPBHomeWorkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_PBHomeWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiPBHomeWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// QQ群作业发布 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiPBHomeWorkAsync (CleverQQApiPBHomeWorkHttpInput input = null)
        {
             await Apiv1CleverQQApiPBHomeWorkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// QQ群作业发布 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiPBHomeWorkAsyncWithHttpInfo (CleverQQApiPBHomeWorkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_PBHomeWork";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiPBHomeWork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出讨论组 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiQuitDisGroup (CleverQQApiQuitDisGroupHttpInput input = null)
        {
             Apiv1CleverQQApiQuitDisGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 退出讨论组 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiQuitDisGroupWithHttpInfo (CleverQQApiQuitDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_QuitDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiQuitDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出讨论组 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiQuitDisGroupAsync (CleverQQApiQuitDisGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiQuitDisGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 退出讨论组 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiQuitDisGroupAsyncWithHttpInfo (CleverQQApiQuitDisGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_QuitDisGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiQuitDisGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiQuitGroup (CleverQQApiQuitGroupHttpInput input = null)
        {
             Apiv1CleverQQApiQuitGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 退群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiQuitGroupWithHttpInfo (CleverQQApiQuitGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_QuitGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiQuitGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiQuitGroupAsync (CleverQQApiQuitGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiQuitGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 退群 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiQuitGroupAsyncWithHttpInfo (CleverQQApiQuitGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_QuitGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiQuitGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送JSON结构消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSendJSON (CleverQQApiSendJSONHttpInput input = null)
        {
             Apiv1CleverQQApiSendJSONWithHttpInfo(input);
        }

        /// <summary>
        /// 发送JSON结构消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSendJSONWithHttpInfo (CleverQQApiSendJSONHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送JSON结构消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSendJSONAsync (CleverQQApiSendJSONHttpInput input = null)
        {
             await Apiv1CleverQQApiSendJSONAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发送JSON结构消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendJSONAsyncWithHttpInfo (CleverQQApiSendJSONHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送普通文本消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSendMsg (CleverQQApiSendMsgHttpInput input = null)
        {
             Apiv1CleverQQApiSendMsgWithHttpInfo(input);
        }

        /// <summary>
        /// 发送普通文本消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSendMsgWithHttpInfo (CleverQQApiSendMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送普通文本消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSendMsgAsync (CleverQQApiSendMsgHttpInput input = null)
        {
             await Apiv1CleverQQApiSendMsgAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发送普通文本消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendMsgAsyncWithHttpInfo (CleverQQApiSendMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSendPack (CleverQQApiSendPackHttpInput input = null)
        {
             Apiv1CleverQQApiSendPackWithHttpInfo(input);
        }

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSendPackWithHttpInfo (CleverQQApiSendPackHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendPack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendPack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSendPackAsync (CleverQQApiSendPackHttpInput input = null)
        {
             await Apiv1CleverQQApiSendPackAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向腾讯发送原始封包（成功返回腾讯返回的包 失败返回空） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendPackAsyncWithHttpInfo (CleverQQApiSendPackHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendPack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendPack", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSendVoice (CleverQQApiSendVoiceHttpInput input = null)
        {
             Apiv1CleverQQApiSendVoiceWithHttpInfo(input);
        }

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSendVoiceWithHttpInfo (CleverQQApiSendVoiceHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendVoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSendVoiceAsync (CleverQQApiSendVoiceHttpInput input = null)
        {
             await Apiv1CleverQQApiSendVoiceAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 好友语音上传并发送 （成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendVoiceAsyncWithHttpInfo (CleverQQApiSendVoiceHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendVoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送XML消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSendXML (CleverQQApiSendXMLHttpInput input = null)
        {
             Apiv1CleverQQApiSendXMLWithHttpInfo(input);
        }

        /// <summary>
        /// 发送XML消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSendXMLWithHttpInfo (CleverQQApiSendXMLHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendXML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送XML消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSendXMLAsync (CleverQQApiSendXMLHttpInput input = null)
        {
             await Apiv1CleverQQApiSendXMLAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发送XML消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSendXMLAsyncWithHttpInfo (CleverQQApiSendXMLHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SendXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSendXML", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取会话SessionKey密钥 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSessionKey (CleverQQApiSessionKeyHttpInput input = null)
        {
             Apiv1CleverQQApiSessionKeyWithHttpInfo(input);
        }

        /// <summary>
        /// 获取会话SessionKey密钥 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSessionKeyWithHttpInfo (CleverQQApiSessionKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SessionKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSessionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 获取会话SessionKey密钥 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSessionKeyAsync (CleverQQApiSessionKeyHttpInput input = null)
        {
             await Apiv1CleverQQApiSessionKeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 获取会话SessionKey密钥 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSessionKeyAsyncWithHttpInfo (CleverQQApiSessionKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SessionKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSessionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetAdmin (CleverQQApiSetAdminHttpInput input = null)
        {
             Apiv1CleverQQApiSetAdminWithHttpInfo(input);
        }

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetAdminWithHttpInfo (CleverQQApiSetAdminHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetAdminAsync (CleverQQApiSetAdminHttpInput input = null)
        {
             await Apiv1CleverQQApiSetAdminAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 设置或取消群管理员   成功返回空  失败返回理由 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetAdminAsyncWithHttpInfo (CleverQQApiSetAdminHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetAdmin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetAdmin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetAnon (CleverQQApiSetAnonHttpInput input = null)
        {
             Apiv1CleverQQApiSetAnonWithHttpInfo(input);
        }

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetAnonWithHttpInfo (CleverQQApiSetAnonHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetAnon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetAnon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetAnonAsync (CleverQQApiSetAnonHttpInput input = null)
        {
             await Apiv1CleverQQApiSetAnonAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 开关群匿名消息发送功能    成功返回真  失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetAnonAsyncWithHttpInfo (CleverQQApiSetAnonHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetAnon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetAnon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改讨论组名称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetDisGroupName (CleverQQApiSetDisGroupNameHttpInput input = null)
        {
             Apiv1CleverQQApiSetDisGroupNameWithHttpInfo(input);
        }

        /// <summary>
        /// 修改讨论组名称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetDisGroupNameWithHttpInfo (CleverQQApiSetDisGroupNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetDisGroupName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetDisGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改讨论组名称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetDisGroupNameAsync (CleverQQApiSetDisGroupNameHttpInput input = null)
        {
             await Apiv1CleverQQApiSetDisGroupNameAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 修改讨论组名称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetDisGroupNameAsyncWithHttpInfo (CleverQQApiSetDisGroupNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetDisGroupName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetDisGroupName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改好友备注姓名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetFriendsRemark (CleverQQApiSetFriendsRemarkHttpInput input = null)
        {
             Apiv1CleverQQApiSetFriendsRemarkWithHttpInfo(input);
        }

        /// <summary>
        /// 修改好友备注姓名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetFriendsRemarkWithHttpInfo (CleverQQApiSetFriendsRemarkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetFriendsRemark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetFriendsRemark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改好友备注姓名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetFriendsRemarkAsync (CleverQQApiSetFriendsRemarkHttpInput input = null)
        {
             await Apiv1CleverQQApiSetFriendsRemarkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 修改好友备注姓名 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetFriendsRemarkAsyncWithHttpInfo (CleverQQApiSetFriendsRemarkHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetFriendsRemark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetFriendsRemark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetGroupCard (CleverQQApiSetGroupCardHttpInput input = null)
        {
             Apiv1CleverQQApiSetGroupCardWithHttpInfo(input);
        }

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetGroupCardWithHttpInfo (CleverQQApiSetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetGroupCardAsync (CleverQQApiSetGroupCardHttpInput input = null)
        {
             await Apiv1CleverQQApiSetGroupCardAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 修改对象群名片 成功返回真 失败返回假 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetGroupCardAsyncWithHttpInfo (CleverQQApiSetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetRInf (CleverQQApiSetRInfHttpInput input = null)
        {
             Apiv1CleverQQApiSetRInfWithHttpInfo(input);
        }

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetRInfWithHttpInfo (CleverQQApiSetRInfHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetRInf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetRInf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetRInfAsync (CleverQQApiSetRInfHttpInput input = null)
        {
             await Apiv1CleverQQApiSetRInfAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 修改机器人在线状态 昵称 个性签名 性别 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetRInfAsyncWithHttpInfo (CleverQQApiSetRInfHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetRInf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetRInf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 屏蔽或接收某群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSetShieldedGroup (CleverQQApiSetShieldedGroupHttpInput input = null)
        {
             Apiv1CleverQQApiSetShieldedGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 屏蔽或接收某群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSetShieldedGroupWithHttpInfo (CleverQQApiSetShieldedGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetShieldedGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetShieldedGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 屏蔽或接收某群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSetShieldedGroupAsync (CleverQQApiSetShieldedGroupHttpInput input = null)
        {
             await Apiv1CleverQQApiSetShieldedGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 屏蔽或接收某群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSetShieldedGroupAsyncWithHttpInfo (CleverQQApiSetShieldedGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SetShieldedGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSetShieldedGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiShakeWindow (CleverQQApiShakeWindowHttpInput input = null)
        {
             Apiv1CleverQQApiShakeWindowWithHttpInfo(input);
        }

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiShakeWindowWithHttpInfo (CleverQQApiShakeWindowHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_ShakeWindow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiShakeWindow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiShakeWindowAsync (CleverQQApiShakeWindowHttpInput input = null)
        {
             await Apiv1CleverQQApiShakeWindowAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向好友发起窗口抖动，调用此Api腾讯会限制频率 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiShakeWindowAsyncWithHttpInfo (CleverQQApiShakeWindowHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_ShakeWindow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiShakeWindow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群内禁言某人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiShutUP (CleverQQApiShutUPHttpInput input = null)
        {
             Apiv1CleverQQApiShutUPWithHttpInfo(input);
        }

        /// <summary>
        /// 群内禁言某人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiShutUPWithHttpInfo (CleverQQApiShutUPHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_ShutUP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiShutUP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群内禁言某人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiShutUPAsync (CleverQQApiShutUPHttpInput input = null)
        {
             await Apiv1CleverQQApiShutUPAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 群内禁言某人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiShutUPAsyncWithHttpInfo (CleverQQApiShutUPHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_ShutUP";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiShutUP", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiSignIn (CleverQQApiSignInHttpInput input = null)
        {
             Apiv1CleverQQApiSignInWithHttpInfo(input);
        }

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiSignInWithHttpInfo (CleverQQApiSignInHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SignIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSignIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiSignInAsync (CleverQQApiSignInHttpInput input = null)
        {
             await Apiv1CleverQQApiSignInAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// QQ群签到（成功返回真 失败返回假） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiSignInAsyncWithHttpInfo (CleverQQApiSignInHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_SignIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiSignIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiTakeGift (CleverQQApiTakeGiftHttpInput input = null)
        {
             Apiv1CleverQQApiTakeGiftWithHttpInfo(input);
        }

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiTakeGiftWithHttpInfo (CleverQQApiTakeGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_TakeGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTakeGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiTakeGiftAsync (CleverQQApiTakeGiftHttpInput input = null)
        {
             await Apiv1CleverQQApiTakeGiftAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 抽取群礼物（返回结果Json，需群聊等级LV5后）Pro可用 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTakeGiftAsyncWithHttpInfo (CleverQQApiTakeGiftHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_TakeGift";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTakeGift", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 腾讯Tea加密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiTea加密 (CleverQQApiTea加密HttpInput input = null)
        {
             Apiv1CleverQQApiTea加密WithHttpInfo(input);
        }

        /// <summary>
        /// 腾讯Tea加密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiTea加密WithHttpInfo (CleverQQApiTea加密HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_Tea加密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTea加密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 腾讯Tea加密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiTea加密Async (CleverQQApiTea加密HttpInput input = null)
        {
             await Apiv1CleverQQApiTea加密AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 腾讯Tea加密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTea加密AsyncWithHttpInfo (CleverQQApiTea加密HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_Tea加密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTea加密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 腾讯Tea解密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiTea解密 (CleverQQApiTea解密HttpInput input = null)
        {
             Apiv1CleverQQApiTea解密WithHttpInfo(input);
        }

        /// <summary>
        /// 腾讯Tea解密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiTea解密WithHttpInfo (CleverQQApiTea解密HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_Tea解密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTea解密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 腾讯Tea解密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiTea解密Async (CleverQQApiTea解密HttpInput input = null)
        {
             await Apiv1CleverQQApiTea解密AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 腾讯Tea解密 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiTea解密AsyncWithHttpInfo (CleverQQApiTea解密HttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_Tea解密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiTea解密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiUpLoadPic (CleverQQApiUpLoadPicHttpInput input = null)
        {
             Apiv1CleverQQApiUpLoadPicWithHttpInfo(input);
        }

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiUpLoadPicWithHttpInfo (CleverQQApiUpLoadPicHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpLoadPic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpLoadPic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiUpLoadPicAsync (CleverQQApiUpLoadPicHttpInput input = null)
        {
             await Apiv1CleverQQApiUpLoadPicAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpLoadPicAsyncWithHttpInfo (CleverQQApiUpLoadPicHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpLoadPic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpLoadPic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiUpLoadVoice (CleverQQApiUpLoadVoiceHttpInput input = null)
        {
             Apiv1CleverQQApiUpLoadVoiceWithHttpInfo(input);
        }

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiUpLoadVoiceWithHttpInfo (CleverQQApiUpLoadVoiceHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpLoadVoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpLoadVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiUpLoadVoiceAsync (CleverQQApiUpLoadVoiceHttpInput input = null)
        {
             await Apiv1CleverQQApiUpLoadVoiceAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 上传QQ语音，成功返回语音GUID  失败返回空 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpLoadVoiceAsyncWithHttpInfo (CleverQQApiUpLoadVoiceHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpLoadVoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpLoadVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiUpVote (CleverQQApiUpVoteHttpInput input = null)
        {
             Apiv1CleverQQApiUpVoteWithHttpInfo(input);
        }

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiUpVoteWithHttpInfo (CleverQQApiUpVoteHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpVote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiUpVoteAsync (CleverQQApiUpVoteHttpInput input = null)
        {
             await Apiv1CleverQQApiUpVoteAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 调用一次点一下，成功返回空，失败返回理由如：每天最多给他点十个赞哦，调用此Api时应注意频率，每人每日可被赞10次，每日每Q最多可赞50人 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiUpVoteAsyncWithHttpInfo (CleverQQApiUpVoteHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_UpVote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiUpVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1CleverQQApiWithdrawMsg (CleverQQApiWithdrawMsgHttpInput input = null)
        {
             Apiv1CleverQQApiWithdrawMsgWithHttpInfo(input);
        }

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1CleverQQApiWithdrawMsgWithHttpInfo (CleverQQApiWithdrawMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_WithdrawMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiWithdrawMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1CleverQQApiWithdrawMsgAsync (CleverQQApiWithdrawMsgHttpInput input = null)
        {
             await Apiv1CleverQQApiWithdrawMsgAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 消息撤回（成功返回空，失败返回腾讯给出的理由）（Pro版可用） 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1CleverQQApiWithdrawMsgAsyncWithHttpInfo (CleverQQApiWithdrawMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/CleverQQ/Api_WithdrawMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1CleverQQApiWithdrawMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
