/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 修改机器人在线状态 昵称 个性签名 性别
    /// </summary>
    [DataContract]
    public partial class CleverQQApiSetRInfHttpInput :  IEquatable<CleverQQApiSetRInfHttpInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiSetRInfHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">响应QQ.</param>
        /// <param name="类型">1、我在线上 2、Q我吧 3、离开 4、忙碌 5、请勿打扰 6、隐身 7、修改昵称 8、修改个性签名 9、修改性别.</param>
        /// <param name="修改内容">类型为7和8时填写修改内容  类型9时“1”为男 “2”为女      其他填“”.</param>
        public CleverQQApiSetRInfHttpInput(string 响应QQ = default(string), int? 类型 = default(int?), string 修改内容 = default(string))
        {
            this.响应QQ = 响应QQ;
            this.类型 = 类型;
            this.修改内容 = 修改内容;
        }
        
        /// <summary>
        /// Gets or Sets 响应QQ
        /// </summary>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 1、我在线上 2、Q我吧 3、离开 4、忙碌 5、请勿打扰 6、隐身 7、修改昵称 8、修改个性签名 9、修改性别
        /// </summary>
        /// <value>1、我在线上 2、Q我吧 3、离开 4、忙碌 5、请勿打扰 6、隐身 7、修改昵称 8、修改个性签名 9、修改性别</value>
        [DataMember(Name="类型", EmitDefaultValue=false)]
        public int? 类型 { get; set; }

        /// <summary>
        /// 类型为7和8时填写修改内容  类型9时“1”为男 “2”为女      其他填“”
        /// </summary>
        /// <value>类型为7和8时填写修改内容  类型9时“1”为男 “2”为女      其他填“”</value>
        [DataMember(Name="修改内容", EmitDefaultValue=false)]
        public string 修改内容 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiSetRInfHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  类型: ").Append(类型).Append("\n");
            sb.Append("  修改内容: ").Append(修改内容).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiSetRInfHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiSetRInfHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiSetRInfHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiSetRInfHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.类型 == input.类型 ||
                    (this.类型 != null &&
                    this.类型.Equals(input.类型))
                ) && 
                (
                    this.修改内容 == input.修改内容 ||
                    (this.修改内容 != null &&
                    this.修改内容.Equals(input.修改内容))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.类型 != null)
                    hashCode = hashCode * 59 + this.类型.GetHashCode();
                if (this.修改内容 != null)
                    hashCode = hashCode * 59 + this.修改内容.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
