/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 发送普通文本消息
    /// </summary>
    [DataContract]
    public partial class CleverQQApiSendMsgHttpInput :  IEquatable<CleverQQApiSendMsgHttpInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiSendMsgHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">机器人QQ.</param>
        /// <param name="信息类型">0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）.</param>
        /// <param name="收信对象群讨论组">发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空.</param>
        /// <param name="收信QQ">收信对象QQ.</param>
        /// <param name="内容">信息内容.</param>
        /// <param name="气泡ID">-1为随机气泡.</param>
        public CleverQQApiSendMsgHttpInput(string 响应QQ = default(string), int? 信息类型 = default(int?), string 收信对象群讨论组 = default(string), string 收信QQ = default(string), string 内容 = default(string), int? 气泡ID = default(int?))
        {
            this.响应QQ = 响应QQ;
            this.信息类型 = 信息类型;
            this.收信对象群讨论组 = 收信对象群讨论组;
            this.收信QQ = 收信QQ;
            this.内容 = 内容;
            this.气泡ID = 气泡ID;
        }
        
        /// <summary>
        /// 机器人QQ
        /// </summary>
        /// <value>机器人QQ</value>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）
        /// </summary>
        /// <value>0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）</value>
        [DataMember(Name="信息类型", EmitDefaultValue=false)]
        public int? 信息类型 { get; set; }

        /// <summary>
        /// 发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空
        /// </summary>
        /// <value>发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空</value>
        [DataMember(Name="收信对象群_讨论组", EmitDefaultValue=false)]
        public string 收信对象群讨论组 { get; set; }

        /// <summary>
        /// 收信对象QQ
        /// </summary>
        /// <value>收信对象QQ</value>
        [DataMember(Name="收信QQ", EmitDefaultValue=false)]
        public string 收信QQ { get; set; }

        /// <summary>
        /// 信息内容
        /// </summary>
        /// <value>信息内容</value>
        [DataMember(Name="内容", EmitDefaultValue=false)]
        public string 内容 { get; set; }

        /// <summary>
        /// -1为随机气泡
        /// </summary>
        /// <value>-1为随机气泡</value>
        [DataMember(Name="气泡ID", EmitDefaultValue=false)]
        public int? 气泡ID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiSendMsgHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  信息类型: ").Append(信息类型).Append("\n");
            sb.Append("  收信对象群讨论组: ").Append(收信对象群讨论组).Append("\n");
            sb.Append("  收信QQ: ").Append(收信QQ).Append("\n");
            sb.Append("  内容: ").Append(内容).Append("\n");
            sb.Append("  气泡ID: ").Append(气泡ID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiSendMsgHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiSendMsgHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiSendMsgHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiSendMsgHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.信息类型 == input.信息类型 ||
                    (this.信息类型 != null &&
                    this.信息类型.Equals(input.信息类型))
                ) && 
                (
                    this.收信对象群讨论组 == input.收信对象群讨论组 ||
                    (this.收信对象群讨论组 != null &&
                    this.收信对象群讨论组.Equals(input.收信对象群讨论组))
                ) && 
                (
                    this.收信QQ == input.收信QQ ||
                    (this.收信QQ != null &&
                    this.收信QQ.Equals(input.收信QQ))
                ) && 
                (
                    this.内容 == input.内容 ||
                    (this.内容 != null &&
                    this.内容.Equals(input.内容))
                ) && 
                (
                    this.气泡ID == input.气泡ID ||
                    (this.气泡ID != null &&
                    this.气泡ID.Equals(input.气泡ID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.信息类型 != null)
                    hashCode = hashCode * 59 + this.信息类型.GetHashCode();
                if (this.收信对象群讨论组 != null)
                    hashCode = hashCode * 59 + this.收信对象群讨论组.GetHashCode();
                if (this.收信QQ != null)
                    hashCode = hashCode * 59 + this.收信QQ.GetHashCode();
                if (this.内容 != null)
                    hashCode = hashCode * 59 + this.内容.GetHashCode();
                if (this.气泡ID != null)
                    hashCode = hashCode * 59 + this.气泡ID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
