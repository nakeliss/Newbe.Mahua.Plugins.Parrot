/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 处理群验证事件 第二模式（新手建议使用Api_HandleEvent） Pro可用
    /// </summary>
    [DataContract]
    public partial class CleverQQApiHandleGroupEventHttpInput :  IEquatable<CleverQQApiHandleGroupEventHttpInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiHandleGroupEventHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">机器人QQ.</param>
        /// <param name="请求类型">213请求入群  214我被邀请加入某群  215某人被邀请加入群  101某人请求添加好友.</param>
        /// <param name="对象QQ">申请入群 被邀请人 请求添加好友人的QQ （当请求类型为214时这里为邀请人QQ）.</param>
        /// <param name="群号">收到请求群号（好友添加时这里请为空）.</param>
        /// <param name="seq">需要处理事件的seq （好友事件留空）.</param>
        /// <param name="处理方式">10同意 20拒绝 30忽略.</param>
        /// <param name="附加信息">拒绝入群，拒绝添加好友 附加信息.</param>
        public CleverQQApiHandleGroupEventHttpInput(string 响应QQ = default(string), int? 请求类型 = default(int?), string 对象QQ = default(string), string 群号 = default(string), string seq = default(string), int? 处理方式 = default(int?), string 附加信息 = default(string))
        {
            this.响应QQ = 响应QQ;
            this.请求类型 = 请求类型;
            this.对象QQ = 对象QQ;
            this.群号 = 群号;
            this.Seq = seq;
            this.处理方式 = 处理方式;
            this.附加信息 = 附加信息;
        }
        
        /// <summary>
        /// 机器人QQ
        /// </summary>
        /// <value>机器人QQ</value>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 213请求入群  214我被邀请加入某群  215某人被邀请加入群  101某人请求添加好友
        /// </summary>
        /// <value>213请求入群  214我被邀请加入某群  215某人被邀请加入群  101某人请求添加好友</value>
        [DataMember(Name="请求类型", EmitDefaultValue=false)]
        public int? 请求类型 { get; set; }

        /// <summary>
        /// 申请入群 被邀请人 请求添加好友人的QQ （当请求类型为214时这里为邀请人QQ）
        /// </summary>
        /// <value>申请入群 被邀请人 请求添加好友人的QQ （当请求类型为214时这里为邀请人QQ）</value>
        [DataMember(Name="对象QQ", EmitDefaultValue=false)]
        public string 对象QQ { get; set; }

        /// <summary>
        /// 收到请求群号（好友添加时这里请为空）
        /// </summary>
        /// <value>收到请求群号（好友添加时这里请为空）</value>
        [DataMember(Name="群号", EmitDefaultValue=false)]
        public string 群号 { get; set; }

        /// <summary>
        /// 需要处理事件的seq （好友事件留空）
        /// </summary>
        /// <value>需要处理事件的seq （好友事件留空）</value>
        [DataMember(Name="seq", EmitDefaultValue=false)]
        public string Seq { get; set; }

        /// <summary>
        /// 10同意 20拒绝 30忽略
        /// </summary>
        /// <value>10同意 20拒绝 30忽略</value>
        [DataMember(Name="处理方式", EmitDefaultValue=false)]
        public int? 处理方式 { get; set; }

        /// <summary>
        /// 拒绝入群，拒绝添加好友 附加信息
        /// </summary>
        /// <value>拒绝入群，拒绝添加好友 附加信息</value>
        [DataMember(Name="附加信息", EmitDefaultValue=false)]
        public string 附加信息 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiHandleGroupEventHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  请求类型: ").Append(请求类型).Append("\n");
            sb.Append("  对象QQ: ").Append(对象QQ).Append("\n");
            sb.Append("  群号: ").Append(群号).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  处理方式: ").Append(处理方式).Append("\n");
            sb.Append("  附加信息: ").Append(附加信息).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiHandleGroupEventHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiHandleGroupEventHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiHandleGroupEventHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiHandleGroupEventHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.请求类型 == input.请求类型 ||
                    (this.请求类型 != null &&
                    this.请求类型.Equals(input.请求类型))
                ) && 
                (
                    this.对象QQ == input.对象QQ ||
                    (this.对象QQ != null &&
                    this.对象QQ.Equals(input.对象QQ))
                ) && 
                (
                    this.群号 == input.群号 ||
                    (this.群号 != null &&
                    this.群号.Equals(input.群号))
                ) && 
                (
                    this.Seq == input.Seq ||
                    (this.Seq != null &&
                    this.Seq.Equals(input.Seq))
                ) && 
                (
                    this.处理方式 == input.处理方式 ||
                    (this.处理方式 != null &&
                    this.处理方式.Equals(input.处理方式))
                ) && 
                (
                    this.附加信息 == input.附加信息 ||
                    (this.附加信息 != null &&
                    this.附加信息.Equals(input.附加信息))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.请求类型 != null)
                    hashCode = hashCode * 59 + this.请求类型.GetHashCode();
                if (this.对象QQ != null)
                    hashCode = hashCode * 59 + this.对象QQ.GetHashCode();
                if (this.群号 != null)
                    hashCode = hashCode * 59 + this.群号.GetHashCode();
                if (this.Seq != null)
                    hashCode = hashCode * 59 + this.Seq.GetHashCode();
                if (this.处理方式 != null)
                    hashCode = hashCode * 59 + this.处理方式.GetHashCode();
                if (this.附加信息 != null)
                    hashCode = hashCode * 59 + this.附加信息.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
