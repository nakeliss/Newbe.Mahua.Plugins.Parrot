/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// QQLightApiSendLogHttpInput
    /// </summary>
    [DataContract]
    public partial class QQLightApiSendLogHttpInput :  IEquatable<QQLightApiSendLogHttpInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApiSendLogHttpInput" /> class.
        /// </summary>
        /// <param name="类型">类型.</param>
        /// <param name="内容">内容.</param>
        /// <param name="字体颜色">字体颜色.</param>
        public QQLightApiSendLogHttpInput(string 类型 = default(string), string 内容 = default(string), int? 字体颜色 = default(int?))
        {
            this.类型 = 类型;
            this.内容 = 内容;
            this.字体颜色 = 字体颜色;
        }
        
        /// <summary>
        /// Gets or Sets 类型
        /// </summary>
        [DataMember(Name="类型", EmitDefaultValue=false)]
        public string 类型 { get; set; }

        /// <summary>
        /// Gets or Sets 内容
        /// </summary>
        [DataMember(Name="内容", EmitDefaultValue=false)]
        public string 内容 { get; set; }

        /// <summary>
        /// Gets or Sets 字体颜色
        /// </summary>
        [DataMember(Name="字体颜色", EmitDefaultValue=false)]
        public int? 字体颜色 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QQLightApiSendLogHttpInput {\n");
            sb.Append("  类型: ").Append(类型).Append("\n");
            sb.Append("  内容: ").Append(内容).Append("\n");
            sb.Append("  字体颜色: ").Append(字体颜色).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QQLightApiSendLogHttpInput);
        }

        /// <summary>
        /// Returns true if QQLightApiSendLogHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of QQLightApiSendLogHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QQLightApiSendLogHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.类型 == input.类型 ||
                    (this.类型 != null &&
                    this.类型.Equals(input.类型))
                ) && 
                (
                    this.内容 == input.内容 ||
                    (this.内容 != null &&
                    this.内容.Equals(input.内容))
                ) && 
                (
                    this.字体颜色 == input.字体颜色 ||
                    (this.字体颜色 != null &&
                    this.字体颜色.Equals(input.字体颜色))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.类型 != null)
                    hashCode = hashCode * 59 + this.类型.GetHashCode();
                if (this.内容 != null)
                    hashCode = hashCode * 59 + this.内容.GetHashCode();
                if (this.字体颜色 != null)
                    hashCode = hashCode * 59 + this.字体颜色.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
