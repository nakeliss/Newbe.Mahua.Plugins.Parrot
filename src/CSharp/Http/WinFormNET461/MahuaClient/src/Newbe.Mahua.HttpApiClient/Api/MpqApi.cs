/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newbe.Mahua.HttpApiClient.Client;
using Newbe.Mahua.HttpApiClient.Model;

namespace Newbe.Mahua.HttpApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMpqApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiAddQQ (MpqApiAddQQHttpInput input = null);

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiAddQQWithHttpInfo (MpqApiAddQQHttpInput input = null);
        /// <summary>
        /// 发说说&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiAddTaotao (MpqApiAddTaotaoHttpInput input = null);

        /// <summary>
        /// 发说说&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiAddTaotaoWithHttpInfo (MpqApiAddTaotaoHttpInput input = null);
        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiBan (MpqApiBanHttpInput input = null);

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiBanWithHttpInfo (MpqApiBanHttpInput input = null);
        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiCacheNameCard (MpqApiCacheNameCardHttpInput input = null);

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiCacheNameCardWithHttpInfo (MpqApiCacheNameCardHttpInput input = null);
        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiCreateDG (MpqApiCreateDGHttpInput input = null);

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiCreateDGWithHttpInfo (MpqApiCreateDGHttpInput input = null);
        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiDBan (MpqApiDBanHttpInput input = null);

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiDBanWithHttpInfo (MpqApiDBanHttpInput input = null);
        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiDGInvitation (MpqApiDGInvitationHttpInput input = null);

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiDGInvitationWithHttpInfo (MpqApiDGInvitationHttpInput input = null);
        /// <summary>
        /// 删除好友&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiDelFriend (MpqApiDelFriendHttpInput input = null);

        /// <summary>
        /// 删除好友&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiDelFriendWithHttpInfo (MpqApiDelFriendHttpInput input = null);
        /// <summary>
        /// 群号转群ID&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGNGetGid (MpqApiGNGetGidHttpInput input = null);

        /// <summary>
        /// 群号转群ID&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGNGetGidWithHttpInfo (MpqApiGNGetGidHttpInput input = null);
        /// <summary>
        /// 取包括群主在内的群管列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetAdminList (MpqApiGetAdminListHttpInput input = null);

        /// <summary>
        /// 取包括群主在内的群管列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetAdminListWithHttpInfo (MpqApiGetAdminListHttpInput input = null);
        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetAge (MpqApiGetAgeHttpInput input = null);

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetAgeWithHttpInfo (MpqApiGetAgeHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetBkn32 (MpqApiGetBkn32HttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetBkn32WithHttpInfo (MpqApiGetBkn32HttpInput input = null);
        /// <summary>
        /// 取得页面登录用的Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetClientkey (MpqApiGetClientkeyHttpInput input = null);

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetClientkeyWithHttpInfo (MpqApiGetClientkeyHttpInput input = null);
        /// <summary>
        /// 取得页面操作用的Cookies&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetCookies (MpqApiGetCookiesHttpInput input = null);

        /// <summary>
        /// 取得页面操作用的Cookies&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetCookiesWithHttpInfo (MpqApiGetCookiesHttpInput input = null);
        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetDGList (MpqApiGetDGListHttpInput input = null);

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetDGListWithHttpInfo (MpqApiGetDGListHttpInput input = null);
        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetEmail (MpqApiGetEmailHttpInput input = null);

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetEmailWithHttpInfo (MpqApiGetEmailHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetFriendList (MpqApiGetFriendListHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetFriendListWithHttpInfo (MpqApiGetFriendListHttpInput input = null);
        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGender (MpqApiGetGenderHttpInput input = null);

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGenderWithHttpInfo (MpqApiGetGenderHttpInput input = null);
        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGroupListA (MpqApiGetGroupListAHttpInput input = null);

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGroupListAWithHttpInfo (MpqApiGetGroupListAHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGroupListB (MpqApiGetGroupListBHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGroupListBWithHttpInfo (MpqApiGetGroupListBHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGroupMemberA (MpqApiGetGroupMemberAHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGroupMemberAWithHttpInfo (MpqApiGetGroupMemberAHttpInput input = null);
        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGroupMemberB (MpqApiGetGroupMemberBHttpInput input = null);

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGroupMemberBWithHttpInfo (MpqApiGetGroupMemberBHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetGtkBkn (MpqApiGetGtkBknHttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetGtkBknWithHttpInfo (MpqApiGetGtkBknHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetLdw (MpqApiGetLdwHttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetLdwWithHttpInfo (MpqApiGetLdwHttpInput input = null);
        /// <summary>
        /// 取得框架输出列表内所有信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetLog (MpqApiGetLogHttpInput input = null);

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetLogWithHttpInfo (MpqApiGetLogHttpInput input = null);
        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetLongClientkey (MpqApiGetLongClientkeyHttpInput input = null);

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetLongClientkeyWithHttpInfo (MpqApiGetLongClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetMC (MpqApiGetMCHttpInput input = null);

        /// <summary>
        /// 取得机器码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetMCWithHttpInfo (MpqApiGetMCHttpInput input = null);
        /// <summary>
        /// 取群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetNameCard (MpqApiGetNameCardHttpInput input = null);

        /// <summary>
        /// 取群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetNameCardWithHttpInfo (MpqApiGetNameCardHttpInput input = null);
        /// <summary>
        /// 取用户名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetNick (MpqApiGetNickHttpInput input = null);

        /// <summary>
        /// 取用户名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetNickWithHttpInfo (MpqApiGetNickHttpInput input = null);
        /// <summary>
        /// 取群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetNotice (MpqApiGetNoticeHttpInput input = null);

        /// <summary>
        /// 取群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetNoticeWithHttpInfo (MpqApiGetNoticeHttpInput input = null);
        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetOnlineQQlist (MpqApiGetOnlineQQlistHttpInput input = null);

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetOnlineQQlistWithHttpInfo (MpqApiGetOnlineQQlistHttpInput input = null);
        /// <summary>
        /// 取个人说明&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetPersonalProfile (MpqApiGetPersonalProfileHttpInput input = null);

        /// <summary>
        /// 取个人说明&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetPersonalProfileWithHttpInfo (MpqApiGetPersonalProfileHttpInput input = null);
        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetPrefix (MpqApiGetPrefixHttpInput input = null);

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetPrefixWithHttpInfo (MpqApiGetPrefixHttpInput input = null);
        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetQQAge (MpqApiGetQQAgeHttpInput input = null);

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetQQAgeWithHttpInfo (MpqApiGetQQAgeHttpInput input = null);
        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetQQLevel (MpqApiGetQQLevelHttpInput input = null);

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetQQLevelWithHttpInfo (MpqApiGetQQLevelHttpInput input = null);
        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetQQlist (MpqApiGetQQlistHttpInput input = null);

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetQQlistWithHttpInfo (MpqApiGetQQlistHttpInput input = null);
        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetRadomOnlineQQ (MpqApiGetRadomOnlineQQHttpInput input = null);

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetRadomOnlineQQWithHttpInfo (MpqApiGetRadomOnlineQQHttpInput input = null);
        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetRunPath (MpqApiGetRunPathHttpInput input = null);

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetRunPathWithHttpInfo (MpqApiGetRunPathHttpInput input = null);
        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetSessionkey (MpqApiGetSessionkeyHttpInput input = null);

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetSessionkeyWithHttpInfo (MpqApiGetSessionkeyHttpInput input = null);
        /// <summary>
        /// 取个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetSign (MpqApiGetSignHttpInput input = null);

        /// <summary>
        /// 取个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetSignWithHttpInfo (MpqApiGetSignHttpInput input = null);
        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetTimeStamp (MpqApiGetTimeStampHttpInput input = null);

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetTimeStampWithHttpInfo (MpqApiGetTimeStampHttpInput input = null);
        /// <summary>
        /// 取框架版本号(发布时间戳&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetVersion (MpqApiGetVersionHttpInput input = null);

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetVersionWithHttpInfo (MpqApiGetVersionHttpInput input = null);
        /// <summary>
        /// 取框架版本名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGetVersionName (MpqApiGetVersionNameHttpInput input = null);

        /// <summary>
        /// 取框架版本名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGetVersionNameWithHttpInfo (MpqApiGetVersionNameHttpInput input = null);
        /// <summary>
        /// 群ID转群号&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGidGetGN (MpqApiGidGetGNHttpInput input = null);

        /// <summary>
        /// 群ID转群号&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGidGetGNWithHttpInfo (MpqApiGidGetGNHttpInput input = null);
        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGroupInvitation (MpqApiGroupInvitationHttpInput input = null);

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGroupInvitationWithHttpInfo (MpqApiGroupInvitationHttpInput input = null);
        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiGuidGetPicLink (MpqApiGuidGetPicLinkHttpInput input = null);

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiGuidGetPicLinkWithHttpInfo (MpqApiGuidGetPicLinkHttpInput input = null);
        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiIfBlock (MpqApiIfBlockHttpInput input = null);

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiIfBlockWithHttpInfo (MpqApiIfBlockHttpInput input = null);
        /// <summary>
        /// 取得本插件启用状态&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiIsEnable (MpqApiIsEnableHttpInput input = null);

        /// <summary>
        /// 取得本插件启用状态&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiIsEnableWithHttpInfo (MpqApiIsEnableHttpInput input = null);
        /// <summary>
        /// 判断对象是否为好友（双向）&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiIsFriend (MpqApiIsFriendHttpInput input = null);

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiIsFriendWithHttpInfo (MpqApiIsFriendHttpInput input = null);
        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiJoinGroup (MpqApiJoinGroupHttpInput input = null);

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiJoinGroupWithHttpInfo (MpqApiJoinGroupHttpInput input = null);
        /// <summary>
        /// 将对象移除群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiKick (MpqApiKickHttpInput input = null);

        /// <summary>
        /// 将对象移除群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiKickWithHttpInfo (MpqApiKickHttpInput input = null);
        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiKickDG (MpqApiKickDGHttpInput input = null);

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiKickDGWithHttpInfo (MpqApiKickDGHttpInput input = null);
        /// <summary>
        /// 登录一个现存的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiLogin (MpqApiLoginHttpInput input = null);

        /// <summary>
        /// 登录一个现存的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiLoginWithHttpInfo (MpqApiLoginHttpInput input = null);
        /// <summary>
        /// 让指定QQ下线&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiLogout (MpqApiLogoutHttpInput input = null);

        /// <summary>
        /// 让指定QQ下线&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiLogoutWithHttpInfo (MpqApiLogoutHttpInput input = null);
        /// <summary>
        /// 在框架记录页输出一行信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiOutPut (MpqApiOutPutHttpInput input = null);

        /// <summary>
        /// 在框架记录页输出一行信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiOutPutWithHttpInfo (MpqApiOutPutHttpInput input = null);
        /// <summary>
        /// 退出讨论组&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiQuitDG (MpqApiQuitDGHttpInput input = null);

        /// <summary>
        /// 退出讨论组&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiQuitDGWithHttpInfo (MpqApiQuitDGHttpInput input = null);
        /// <summary>
        /// 退出群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiQuitGroup (MpqApiQuitGroupHttpInput input = null);

        /// <summary>
        /// 退出群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiQuitGroupWithHttpInfo (MpqApiQuitGroupHttpInput input = null);
        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiReply (MpqApiReplyHttpInput input = null);

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiReplyWithHttpInfo (MpqApiReplyHttpInput input = null);
        /// <summary>
        /// 发送封包&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSend (MpqApiSendHttpInput input = null);

        /// <summary>
        /// 发送封包&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendWithHttpInfo (MpqApiSendHttpInput input = null);
        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSendMsg (MpqApiSendMsgHttpInput input = null);

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendMsgWithHttpInfo (MpqApiSendMsgHttpInput input = null);
        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSendMusic (MpqApiSendMusicHttpInput input = null);

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendMusicWithHttpInfo (MpqApiSendMusicHttpInput input = null);
        /// <summary>
        /// &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSendObjectMsg (MpqApiSendObjectMsgHttpInput input = null);

        /// <summary>
        /// &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendObjectMsgWithHttpInfo (MpqApiSendObjectMsgHttpInput input = null);
        /// <summary>
        /// 向好友发送窗口抖动信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSendShake (MpqApiSendShakeHttpInput input = null);

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendShakeWithHttpInfo (MpqApiSendShakeHttpInput input = null);
        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSendTyping (MpqApiSendTypingHttpInput input = null);

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSendTypingWithHttpInfo (MpqApiSendTypingHttpInput input = null);
        /// <summary>
        /// 设置群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSetNameCard (MpqApiSetNameCardHttpInput input = null);

        /// <summary>
        /// 设置群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSetNameCardWithHttpInfo (MpqApiSetNameCardHttpInput input = null);
        /// <summary>
        /// 发群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSetNotice (MpqApiSetNoticeHttpInput input = null);

        /// <summary>
        /// 发群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSetNoticeWithHttpInfo (MpqApiSetNoticeHttpInput input = null);
        /// <summary>
        /// 设置在线状态+附加信息 &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSetOLStatus (MpqApiSetOLStatusHttpInput input = null);

        /// <summary>
        /// 设置在线状态+附加信息 &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSetOLStatusWithHttpInfo (MpqApiSetOLStatusHttpInput input = null);
        /// <summary>
        /// 设置个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiSetSign (MpqApiSetSignHttpInput input = null);

        /// <summary>
        /// 设置个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiSetSignWithHttpInfo (MpqApiSetSignHttpInput input = null);
        /// <summary>
        /// 禁言群成员&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiShutup (MpqApiShutupHttpInput input = null);

        /// <summary>
        /// 禁言群成员&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiShutupWithHttpInfo (MpqApiShutupHttpInput input = null);
        /// <summary>
        /// tean加密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiTea加密 (MpqApiTea加密HttpInput input = null);

        /// <summary>
        /// tean加密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiTea加密WithHttpInfo (MpqApiTea加密HttpInput input = null);
        /// <summary>
        /// tean解密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiTea解密 (MpqApiTea解密HttpInput input = null);

        /// <summary>
        /// tean解密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiTea解密WithHttpInfo (MpqApiTea解密HttpInput input = null);
        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1MpqApiUploadPic (MpqApiUploadPicHttpInput input = null);

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1MpqApiUploadPicWithHttpInfo (MpqApiUploadPicHttpInput input = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiAddQQAsync (MpqApiAddQQHttpInput input = null);

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiAddQQAsyncWithHttpInfo (MpqApiAddQQHttpInput input = null);
        /// <summary>
        /// 发说说&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiAddTaotaoAsync (MpqApiAddTaotaoHttpInput input = null);

        /// <summary>
        /// 发说说&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiAddTaotaoAsyncWithHttpInfo (MpqApiAddTaotaoHttpInput input = null);
        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiBanAsync (MpqApiBanHttpInput input = null);

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiBanAsyncWithHttpInfo (MpqApiBanHttpInput input = null);
        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiCacheNameCardAsync (MpqApiCacheNameCardHttpInput input = null);

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiCacheNameCardAsyncWithHttpInfo (MpqApiCacheNameCardHttpInput input = null);
        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiCreateDGAsync (MpqApiCreateDGHttpInput input = null);

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiCreateDGAsyncWithHttpInfo (MpqApiCreateDGHttpInput input = null);
        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiDBanAsync (MpqApiDBanHttpInput input = null);

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDBanAsyncWithHttpInfo (MpqApiDBanHttpInput input = null);
        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiDGInvitationAsync (MpqApiDGInvitationHttpInput input = null);

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDGInvitationAsyncWithHttpInfo (MpqApiDGInvitationHttpInput input = null);
        /// <summary>
        /// 删除好友&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiDelFriendAsync (MpqApiDelFriendHttpInput input = null);

        /// <summary>
        /// 删除好友&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDelFriendAsyncWithHttpInfo (MpqApiDelFriendHttpInput input = null);
        /// <summary>
        /// 群号转群ID&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGNGetGidAsync (MpqApiGNGetGidHttpInput input = null);

        /// <summary>
        /// 群号转群ID&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGNGetGidAsyncWithHttpInfo (MpqApiGNGetGidHttpInput input = null);
        /// <summary>
        /// 取包括群主在内的群管列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetAdminListAsync (MpqApiGetAdminListHttpInput input = null);

        /// <summary>
        /// 取包括群主在内的群管列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetAdminListAsyncWithHttpInfo (MpqApiGetAdminListHttpInput input = null);
        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetAgeAsync (MpqApiGetAgeHttpInput input = null);

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetAgeAsyncWithHttpInfo (MpqApiGetAgeHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetBkn32Async (MpqApiGetBkn32HttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetBkn32AsyncWithHttpInfo (MpqApiGetBkn32HttpInput input = null);
        /// <summary>
        /// 取得页面登录用的Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetClientkeyAsync (MpqApiGetClientkeyHttpInput input = null);

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetClientkeyAsyncWithHttpInfo (MpqApiGetClientkeyHttpInput input = null);
        /// <summary>
        /// 取得页面操作用的Cookies&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetCookiesAsync (MpqApiGetCookiesHttpInput input = null);

        /// <summary>
        /// 取得页面操作用的Cookies&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetCookiesAsyncWithHttpInfo (MpqApiGetCookiesHttpInput input = null);
        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetDGListAsync (MpqApiGetDGListHttpInput input = null);

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetDGListAsyncWithHttpInfo (MpqApiGetDGListHttpInput input = null);
        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetEmailAsync (MpqApiGetEmailHttpInput input = null);

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetEmailAsyncWithHttpInfo (MpqApiGetEmailHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetFriendListAsync (MpqApiGetFriendListHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetFriendListAsyncWithHttpInfo (MpqApiGetFriendListHttpInput input = null);
        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGenderAsync (MpqApiGetGenderHttpInput input = null);

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGenderAsyncWithHttpInfo (MpqApiGetGenderHttpInput input = null);
        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGroupListAAsync (MpqApiGetGroupListAHttpInput input = null);

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupListAAsyncWithHttpInfo (MpqApiGetGroupListAHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGroupListBAsync (MpqApiGetGroupListBHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupListBAsyncWithHttpInfo (MpqApiGetGroupListBHttpInput input = null);
        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGroupMemberAAsync (MpqApiGetGroupMemberAHttpInput input = null);

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupMemberAAsyncWithHttpInfo (MpqApiGetGroupMemberAHttpInput input = null);
        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGroupMemberBAsync (MpqApiGetGroupMemberBHttpInput input = null);

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupMemberBAsyncWithHttpInfo (MpqApiGetGroupMemberBHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetGtkBknAsync (MpqApiGetGtkBknHttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGtkBknAsyncWithHttpInfo (MpqApiGetGtkBknHttpInput input = null);
        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetLdwAsync (MpqApiGetLdwHttpInput input = null);

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLdwAsyncWithHttpInfo (MpqApiGetLdwHttpInput input = null);
        /// <summary>
        /// 取得框架输出列表内所有信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetLogAsync (MpqApiGetLogHttpInput input = null);

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLogAsyncWithHttpInfo (MpqApiGetLogHttpInput input = null);
        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetLongClientkeyAsync (MpqApiGetLongClientkeyHttpInput input = null);

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLongClientkeyAsyncWithHttpInfo (MpqApiGetLongClientkeyHttpInput input = null);
        /// <summary>
        /// 取得机器码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetMCAsync (MpqApiGetMCHttpInput input = null);

        /// <summary>
        /// 取得机器码&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetMCAsyncWithHttpInfo (MpqApiGetMCHttpInput input = null);
        /// <summary>
        /// 取群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetNameCardAsync (MpqApiGetNameCardHttpInput input = null);

        /// <summary>
        /// 取群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNameCardAsyncWithHttpInfo (MpqApiGetNameCardHttpInput input = null);
        /// <summary>
        /// 取用户名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetNickAsync (MpqApiGetNickHttpInput input = null);

        /// <summary>
        /// 取用户名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNickAsyncWithHttpInfo (MpqApiGetNickHttpInput input = null);
        /// <summary>
        /// 取群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetNoticeAsync (MpqApiGetNoticeHttpInput input = null);

        /// <summary>
        /// 取群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNoticeAsyncWithHttpInfo (MpqApiGetNoticeHttpInput input = null);
        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetOnlineQQlistAsync (MpqApiGetOnlineQQlistHttpInput input = null);

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetOnlineQQlistAsyncWithHttpInfo (MpqApiGetOnlineQQlistHttpInput input = null);
        /// <summary>
        /// 取个人说明&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetPersonalProfileAsync (MpqApiGetPersonalProfileHttpInput input = null);

        /// <summary>
        /// 取个人说明&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetPersonalProfileAsyncWithHttpInfo (MpqApiGetPersonalProfileHttpInput input = null);
        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetPrefixAsync (MpqApiGetPrefixHttpInput input = null);

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetPrefixAsyncWithHttpInfo (MpqApiGetPrefixHttpInput input = null);
        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetQQAgeAsync (MpqApiGetQQAgeHttpInput input = null);

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQAgeAsyncWithHttpInfo (MpqApiGetQQAgeHttpInput input = null);
        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetQQLevelAsync (MpqApiGetQQLevelHttpInput input = null);

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQLevelAsyncWithHttpInfo (MpqApiGetQQLevelHttpInput input = null);
        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetQQlistAsync (MpqApiGetQQlistHttpInput input = null);

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQlistAsyncWithHttpInfo (MpqApiGetQQlistHttpInput input = null);
        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetRadomOnlineQQAsync (MpqApiGetRadomOnlineQQHttpInput input = null);

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetRadomOnlineQQAsyncWithHttpInfo (MpqApiGetRadomOnlineQQHttpInput input = null);
        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetRunPathAsync (MpqApiGetRunPathHttpInput input = null);

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetRunPathAsyncWithHttpInfo (MpqApiGetRunPathHttpInput input = null);
        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetSessionkeyAsync (MpqApiGetSessionkeyHttpInput input = null);

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetSessionkeyAsyncWithHttpInfo (MpqApiGetSessionkeyHttpInput input = null);
        /// <summary>
        /// 取个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetSignAsync (MpqApiGetSignHttpInput input = null);

        /// <summary>
        /// 取个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetSignAsyncWithHttpInfo (MpqApiGetSignHttpInput input = null);
        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetTimeStampAsync (MpqApiGetTimeStampHttpInput input = null);

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetTimeStampAsyncWithHttpInfo (MpqApiGetTimeStampHttpInput input = null);
        /// <summary>
        /// 取框架版本号(发布时间戳&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetVersionAsync (MpqApiGetVersionHttpInput input = null);

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetVersionAsyncWithHttpInfo (MpqApiGetVersionHttpInput input = null);
        /// <summary>
        /// 取框架版本名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGetVersionNameAsync (MpqApiGetVersionNameHttpInput input = null);

        /// <summary>
        /// 取框架版本名&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetVersionNameAsyncWithHttpInfo (MpqApiGetVersionNameHttpInput input = null);
        /// <summary>
        /// 群ID转群号&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGidGetGNAsync (MpqApiGidGetGNHttpInput input = null);

        /// <summary>
        /// 群ID转群号&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGidGetGNAsyncWithHttpInfo (MpqApiGidGetGNHttpInput input = null);
        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGroupInvitationAsync (MpqApiGroupInvitationHttpInput input = null);

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGroupInvitationAsyncWithHttpInfo (MpqApiGroupInvitationHttpInput input = null);
        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiGuidGetPicLinkAsync (MpqApiGuidGetPicLinkHttpInput input = null);

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGuidGetPicLinkAsyncWithHttpInfo (MpqApiGuidGetPicLinkHttpInput input = null);
        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiIfBlockAsync (MpqApiIfBlockHttpInput input = null);

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIfBlockAsyncWithHttpInfo (MpqApiIfBlockHttpInput input = null);
        /// <summary>
        /// 取得本插件启用状态&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiIsEnableAsync (MpqApiIsEnableHttpInput input = null);

        /// <summary>
        /// 取得本插件启用状态&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIsEnableAsyncWithHttpInfo (MpqApiIsEnableHttpInput input = null);
        /// <summary>
        /// 判断对象是否为好友（双向）&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiIsFriendAsync (MpqApiIsFriendHttpInput input = null);

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIsFriendAsyncWithHttpInfo (MpqApiIsFriendHttpInput input = null);
        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiJoinGroupAsync (MpqApiJoinGroupHttpInput input = null);

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiJoinGroupAsyncWithHttpInfo (MpqApiJoinGroupHttpInput input = null);
        /// <summary>
        /// 将对象移除群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiKickAsync (MpqApiKickHttpInput input = null);

        /// <summary>
        /// 将对象移除群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiKickAsyncWithHttpInfo (MpqApiKickHttpInput input = null);
        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiKickDGAsync (MpqApiKickDGHttpInput input = null);

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiKickDGAsyncWithHttpInfo (MpqApiKickDGHttpInput input = null);
        /// <summary>
        /// 登录一个现存的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiLoginAsync (MpqApiLoginHttpInput input = null);

        /// <summary>
        /// 登录一个现存的QQ&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiLoginAsyncWithHttpInfo (MpqApiLoginHttpInput input = null);
        /// <summary>
        /// 让指定QQ下线&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiLogoutAsync (MpqApiLogoutHttpInput input = null);

        /// <summary>
        /// 让指定QQ下线&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiLogoutAsyncWithHttpInfo (MpqApiLogoutHttpInput input = null);
        /// <summary>
        /// 在框架记录页输出一行信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiOutPutAsync (MpqApiOutPutHttpInput input = null);

        /// <summary>
        /// 在框架记录页输出一行信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiOutPutAsyncWithHttpInfo (MpqApiOutPutHttpInput input = null);
        /// <summary>
        /// 退出讨论组&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiQuitDGAsync (MpqApiQuitDGHttpInput input = null);

        /// <summary>
        /// 退出讨论组&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiQuitDGAsyncWithHttpInfo (MpqApiQuitDGHttpInput input = null);
        /// <summary>
        /// 退出群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiQuitGroupAsync (MpqApiQuitGroupHttpInput input = null);

        /// <summary>
        /// 退出群&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiQuitGroupAsyncWithHttpInfo (MpqApiQuitGroupHttpInput input = null);
        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiReplyAsync (MpqApiReplyHttpInput input = null);

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiReplyAsyncWithHttpInfo (MpqApiReplyHttpInput input = null);
        /// <summary>
        /// 发送封包&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendAsync (MpqApiSendHttpInput input = null);

        /// <summary>
        /// 发送封包&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendAsyncWithHttpInfo (MpqApiSendHttpInput input = null);
        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendMsgAsync (MpqApiSendMsgHttpInput input = null);

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendMsgAsyncWithHttpInfo (MpqApiSendMsgHttpInput input = null);
        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendMusicAsync (MpqApiSendMusicHttpInput input = null);

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendMusicAsyncWithHttpInfo (MpqApiSendMusicHttpInput input = null);
        /// <summary>
        /// &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendObjectMsgAsync (MpqApiSendObjectMsgHttpInput input = null);

        /// <summary>
        /// &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendObjectMsgAsyncWithHttpInfo (MpqApiSendObjectMsgHttpInput input = null);
        /// <summary>
        /// 向好友发送窗口抖动信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendShakeAsync (MpqApiSendShakeHttpInput input = null);

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendShakeAsyncWithHttpInfo (MpqApiSendShakeHttpInput input = null);
        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSendTypingAsync (MpqApiSendTypingHttpInput input = null);

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendTypingAsyncWithHttpInfo (MpqApiSendTypingHttpInput input = null);
        /// <summary>
        /// 设置群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSetNameCardAsync (MpqApiSetNameCardHttpInput input = null);

        /// <summary>
        /// 设置群名片&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetNameCardAsyncWithHttpInfo (MpqApiSetNameCardHttpInput input = null);
        /// <summary>
        /// 发群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSetNoticeAsync (MpqApiSetNoticeHttpInput input = null);

        /// <summary>
        /// 发群公告&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetNoticeAsyncWithHttpInfo (MpqApiSetNoticeHttpInput input = null);
        /// <summary>
        /// 设置在线状态+附加信息 &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSetOLStatusAsync (MpqApiSetOLStatusHttpInput input = null);

        /// <summary>
        /// 设置在线状态+附加信息 &#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetOLStatusAsyncWithHttpInfo (MpqApiSetOLStatusHttpInput input = null);
        /// <summary>
        /// 设置个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiSetSignAsync (MpqApiSetSignHttpInput input = null);

        /// <summary>
        /// 设置个签&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetSignAsyncWithHttpInfo (MpqApiSetSignHttpInput input = null);
        /// <summary>
        /// 禁言群成员&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiShutupAsync (MpqApiShutupHttpInput input = null);

        /// <summary>
        /// 禁言群成员&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiShutupAsyncWithHttpInfo (MpqApiShutupHttpInput input = null);
        /// <summary>
        /// tean加密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiTea加密Async (MpqApiTea加密HttpInput input = null);

        /// <summary>
        /// tean加密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiTea加密AsyncWithHttpInfo (MpqApiTea加密HttpInput input = null);
        /// <summary>
        /// tean解密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiTea解密Async (MpqApiTea解密HttpInput input = null);

        /// <summary>
        /// tean解密算法&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiTea解密AsyncWithHttpInfo (MpqApiTea解密HttpInput input = null);
        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Apiv1MpqApiUploadPicAsync (MpqApiUploadPicHttpInput input = null);

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiUploadPicAsyncWithHttpInfo (MpqApiUploadPicHttpInput input = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MpqApi : IMpqApi
    {
        private Newbe.Mahua.HttpApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MpqApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MpqApi(String basePath)
        {
            this.Configuration = new Newbe.Mahua.HttpApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MpqApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MpqApi(Newbe.Mahua.HttpApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Newbe.Mahua.HttpApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newbe.Mahua.HttpApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newbe.Mahua.HttpApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiAddQQ (MpqApiAddQQHttpInput input = null)
        {
             Apiv1MpqApiAddQQWithHttpInfo(input);
        }

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiAddQQWithHttpInfo (MpqApiAddQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_AddQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiAddQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiAddQQAsync (MpqApiAddQQHttpInput input = null)
        {
             await Apiv1MpqApiAddQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 往帐号列表添加一个Q.当该Q已存在时则覆盖密码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiAddQQAsyncWithHttpInfo (MpqApiAddQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_AddQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiAddQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发说说&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiAddTaotao (MpqApiAddTaotaoHttpInput input = null)
        {
             Apiv1MpqApiAddTaotaoWithHttpInfo(input);
        }

        /// <summary>
        /// 发说说&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiAddTaotaoWithHttpInfo (MpqApiAddTaotaoHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_AddTaotao";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiAddTaotao", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发说说&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiAddTaotaoAsync (MpqApiAddTaotaoHttpInput input = null)
        {
             await Apiv1MpqApiAddTaotaoAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发说说&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiAddTaotaoAsyncWithHttpInfo (MpqApiAddTaotaoHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_AddTaotao";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiAddTaotao", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiBan (MpqApiBanHttpInput input = null)
        {
             Apiv1MpqApiBanWithHttpInfo(input);
        }

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiBanWithHttpInfo (MpqApiBanHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiBan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiBanAsync (MpqApiBanHttpInput input = null)
        {
             await Apiv1MpqApiBanAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将指定QQ列入QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiBanAsyncWithHttpInfo (MpqApiBanHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiBan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiCacheNameCard (MpqApiCacheNameCardHttpInput input = null)
        {
             Apiv1MpqApiCacheNameCardWithHttpInfo(input);
        }

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiCacheNameCardWithHttpInfo (MpqApiCacheNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Cache_NameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiCacheNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiCacheNameCardAsync (MpqApiCacheNameCardHttpInput input = null)
        {
             await Apiv1MpqApiCacheNameCardAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将群名片加入高速缓存当作.&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiCacheNameCardAsyncWithHttpInfo (MpqApiCacheNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Cache_NameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiCacheNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiCreateDG (MpqApiCreateDGHttpInput input = null)
        {
             Apiv1MpqApiCreateDGWithHttpInfo(input);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiCreateDGWithHttpInfo (MpqApiCreateDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_CreateDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiCreateDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiCreateDGAsync (MpqApiCreateDGHttpInput input = null)
        {
             await Apiv1MpqApiCreateDGAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 创建一个讨论组 成功返回讨论组ID 失败返回空 注:每24小时只能创建100个讨论组 悠着点用&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiCreateDGAsyncWithHttpInfo (MpqApiCreateDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_CreateDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiCreateDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiDBan (MpqApiDBanHttpInput input = null)
        {
             Apiv1MpqApiDBanWithHttpInfo(input);
        }

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiDBanWithHttpInfo (MpqApiDBanHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DBan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDBan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiDBanAsync (MpqApiDBanHttpInput input = null)
        {
             await Apiv1MpqApiDBanAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将指定QQ移出QQ黑名单&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDBanAsyncWithHttpInfo (MpqApiDBanHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DBan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDBan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiDGInvitation (MpqApiDGInvitationHttpInput input = null)
        {
             Apiv1MpqApiDGInvitationWithHttpInfo(input);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiDGInvitationWithHttpInfo (MpqApiDGInvitationHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DGInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDGInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiDGInvitationAsync (MpqApiDGInvitationHttpInput input = null)
        {
             await Apiv1MpqApiDGInvitationAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 邀请对象加入讨论组 成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDGInvitationAsyncWithHttpInfo (MpqApiDGInvitationHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DGInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDGInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除好友&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiDelFriend (MpqApiDelFriendHttpInput input = null)
        {
             Apiv1MpqApiDelFriendWithHttpInfo(input);
        }

        /// <summary>
        /// 删除好友&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiDelFriendWithHttpInfo (MpqApiDelFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DelFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDelFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 删除好友&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiDelFriendAsync (MpqApiDelFriendHttpInput input = null)
        {
             await Apiv1MpqApiDelFriendAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 删除好友&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiDelFriendAsyncWithHttpInfo (MpqApiDelFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_DelFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiDelFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群号转群ID&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGNGetGid (MpqApiGNGetGidHttpInput input = null)
        {
             Apiv1MpqApiGNGetGidWithHttpInfo(input);
        }

        /// <summary>
        /// 群号转群ID&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGNGetGidWithHttpInfo (MpqApiGNGetGidHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GNGetGid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGNGetGid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群号转群ID&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGNGetGidAsync (MpqApiGNGetGidHttpInput input = null)
        {
             await Apiv1MpqApiGNGetGidAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 群号转群ID&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGNGetGidAsyncWithHttpInfo (MpqApiGNGetGidHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GNGetGid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGNGetGid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取包括群主在内的群管列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetAdminList (MpqApiGetAdminListHttpInput input = null)
        {
             Apiv1MpqApiGetAdminListWithHttpInfo(input);
        }

        /// <summary>
        /// 取包括群主在内的群管列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetAdminListWithHttpInfo (MpqApiGetAdminListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetAdminList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetAdminList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取包括群主在内的群管列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetAdminListAsync (MpqApiGetAdminListHttpInput input = null)
        {
             await Apiv1MpqApiGetAdminListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取包括群主在内的群管列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetAdminListAsyncWithHttpInfo (MpqApiGetAdminListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetAdminList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetAdminList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetAge (MpqApiGetAgeHttpInput input = null)
        {
             Apiv1MpqApiGetAgeWithHttpInfo(input);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetAgeWithHttpInfo (MpqApiGetAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetAgeAsync (MpqApiGetAgeHttpInput input = null)
        {
             await Apiv1MpqApiGetAgeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取年龄 成功返回年龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetAgeAsyncWithHttpInfo (MpqApiGetAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetBkn32 (MpqApiGetBkn32HttpInput input = null)
        {
             Apiv1MpqApiGetBkn32WithHttpInfo(input);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetBkn32WithHttpInfo (MpqApiGetBkn32HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetBkn32";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetBkn32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetBkn32Async (MpqApiGetBkn32HttpInput input = null)
        {
             await Apiv1MpqApiGetBkn32AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Bkn或长G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetBkn32AsyncWithHttpInfo (MpqApiGetBkn32HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetBkn32";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetBkn32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetClientkey (MpqApiGetClientkeyHttpInput input = null)
        {
             Apiv1MpqApiGetClientkeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetClientkeyWithHttpInfo (MpqApiGetClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetClientkeyAsync (MpqApiGetClientkeyHttpInput input = null)
        {
             await Apiv1MpqApiGetClientkeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得页面登录用的Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetClientkeyAsyncWithHttpInfo (MpqApiGetClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面操作用的Cookies&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetCookies (MpqApiGetCookiesHttpInput input = null)
        {
             Apiv1MpqApiGetCookiesWithHttpInfo(input);
        }

        /// <summary>
        /// 取得页面操作用的Cookies&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetCookiesWithHttpInfo (MpqApiGetCookiesHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetCookies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetCookies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面操作用的Cookies&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetCookiesAsync (MpqApiGetCookiesHttpInput input = null)
        {
             await Apiv1MpqApiGetCookiesAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得页面操作用的Cookies&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetCookiesAsyncWithHttpInfo (MpqApiGetCookiesHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetCookies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetCookies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetDGList (MpqApiGetDGListHttpInput input = null)
        {
             Apiv1MpqApiGetDGListWithHttpInfo(input);
        }

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetDGListWithHttpInfo (MpqApiGetDGListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetDGList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetDGList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetDGListAsync (MpqApiGetDGListHttpInput input = null)
        {
             await Apiv1MpqApiGetDGListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 成功返回以换行符分割的讨论组号列表.最大为100个讨论组  失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetDGListAsyncWithHttpInfo (MpqApiGetDGListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetDGList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetDGList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetEmail (MpqApiGetEmailHttpInput input = null)
        {
             Apiv1MpqApiGetEmailWithHttpInfo(input);
        }

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetEmailWithHttpInfo (MpqApiGetEmailHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetEmailAsync (MpqApiGetEmailHttpInput input = null)
        {
             await Apiv1MpqApiGetEmailAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取邮箱 成功返回邮箱 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetEmailAsyncWithHttpInfo (MpqApiGetEmailHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetFriendList (MpqApiGetFriendListHttpInput input = null)
        {
             Apiv1MpqApiGetFriendListWithHttpInfo(input);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetFriendListWithHttpInfo (MpqApiGetFriendListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetFriendList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetFriendList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetFriendListAsync (MpqApiGetFriendListHttpInput input = null)
        {
             await Apiv1MpqApiGetFriendListAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过qun.qq.com接口取得好友列表。成功返回转码后的JSON文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetFriendListAsyncWithHttpInfo (MpqApiGetFriendListHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetFriendList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetFriendList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGender (MpqApiGetGenderHttpInput input = null)
        {
             Apiv1MpqApiGetGenderWithHttpInfo(input);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGenderWithHttpInfo (MpqApiGetGenderHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGenderAsync (MpqApiGetGenderHttpInput input = null)
        {
             await Apiv1MpqApiGetGenderAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取对象性别 1男 2女  未或失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGenderAsyncWithHttpInfo (MpqApiGetGenderHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGroupListA (MpqApiGetGroupListAHttpInput input = null)
        {
             Apiv1MpqApiGetGroupListAWithHttpInfo(input);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGroupListAWithHttpInfo (MpqApiGetGroupListAHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupListA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupListA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGroupListAAsync (MpqApiGetGroupListAHttpInput input = null)
        {
             await Apiv1MpqApiGetGroupListAAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupListAAsyncWithHttpInfo (MpqApiGetGroupListAHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupListA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupListA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGroupListB (MpqApiGetGroupListBHttpInput input = null)
        {
             Apiv1MpqApiGetGroupListBWithHttpInfo(input);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGroupListBWithHttpInfo (MpqApiGetGroupListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupListB";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGroupListBAsync (MpqApiGetGroupListBHttpInput input = null)
        {
             await Apiv1MpqApiGetGroupListBAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过qun.qq.com接口取得取群列表.成功返回转码后的JSON格式文本信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupListBAsyncWithHttpInfo (MpqApiGetGroupListBHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupListB";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupListB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGroupMemberA (MpqApiGetGroupMemberAHttpInput input = null)
        {
             Apiv1MpqApiGetGroupMemberAWithHttpInfo(input);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGroupMemberAWithHttpInfo (MpqApiGetGroupMemberAHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupMemberA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupMemberA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGroupMemberAAsync (MpqApiGetGroupMemberAHttpInput input = null)
        {
             await Apiv1MpqApiGetGroupMemberAAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过qun.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupMemberAAsyncWithHttpInfo (MpqApiGetGroupMemberAHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupMemberA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupMemberA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGroupMemberB (MpqApiGetGroupMemberBHttpInput input = null)
        {
             Apiv1MpqApiGetGroupMemberBWithHttpInfo(input);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGroupMemberBWithHttpInfo (MpqApiGetGroupMemberBHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupMemberB";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupMemberB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGroupMemberBAsync (MpqApiGetGroupMemberBHttpInput input = null)
        {
             await Apiv1MpqApiGetGroupMemberBAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 通过qun.qzone.qq.com接口取得群成员列表 成功返回转码后的JSON格式文本&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGroupMemberBAsyncWithHttpInfo (MpqApiGetGroupMemberBHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGroupMemberB";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGroupMemberB", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetGtkBkn (MpqApiGetGtkBknHttpInput input = null)
        {
             Apiv1MpqApiGetGtkBknWithHttpInfo(input);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetGtkBknWithHttpInfo (MpqApiGetGtkBknHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGtk_Bkn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGtkBkn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetGtkBknAsync (MpqApiGetGtkBknHttpInput input = null)
        {
             await Apiv1MpqApiGetGtkBknAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数Bkn或G_tk&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetGtkBknAsyncWithHttpInfo (MpqApiGetGtkBknHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetGtk_Bkn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetGtkBkn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetLdw (MpqApiGetLdwHttpInput input = null)
        {
             Apiv1MpqApiGetLdwWithHttpInfo(input);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetLdwWithHttpInfo (MpqApiGetLdwHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLdw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLdw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetLdwAsync (MpqApiGetLdwHttpInput input = null)
        {
             await Apiv1MpqApiGetLdwAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据提交的QQ号计算得到页面操作用参数长Ldw&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLdwAsyncWithHttpInfo (MpqApiGetLdwHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLdw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLdw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetLog (MpqApiGetLogHttpInput input = null)
        {
             Apiv1MpqApiGetLogWithHttpInfo(input);
        }

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetLogWithHttpInfo (MpqApiGetLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetLogAsync (MpqApiGetLogHttpInput input = null)
        {
             await Apiv1MpqApiGetLogAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得框架输出列表内所有信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLogAsyncWithHttpInfo (MpqApiGetLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetLongClientkey (MpqApiGetLongClientkeyHttpInput input = null)
        {
             Apiv1MpqApiGetLongClientkeyWithHttpInfo(input);
        }

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetLongClientkeyWithHttpInfo (MpqApiGetLongClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLongClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLongClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetLongClientkeyAsync (MpqApiGetLongClientkeyHttpInput input = null)
        {
             await Apiv1MpqApiGetLongClientkeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得页面登录用的长Clientkey&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetLongClientkeyAsyncWithHttpInfo (MpqApiGetLongClientkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetLongClientkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetLongClientkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetMC (MpqApiGetMCHttpInput input = null)
        {
             Apiv1MpqApiGetMCWithHttpInfo(input);
        }

        /// <summary>
        /// 取得机器码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetMCWithHttpInfo (MpqApiGetMCHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetMC";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetMC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得机器码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetMCAsync (MpqApiGetMCHttpInput input = null)
        {
             await Apiv1MpqApiGetMCAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得机器码&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetMCAsyncWithHttpInfo (MpqApiGetMCHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetMC";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetMC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetNameCard (MpqApiGetNameCardHttpInput input = null)
        {
             Apiv1MpqApiGetNameCardWithHttpInfo(input);
        }

        /// <summary>
        /// 取群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetNameCardWithHttpInfo (MpqApiGetNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetNameCardAsync (MpqApiGetNameCardHttpInput input = null)
        {
             await Apiv1MpqApiGetNameCardAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNameCardAsyncWithHttpInfo (MpqApiGetNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取用户名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetNick (MpqApiGetNickHttpInput input = null)
        {
             Apiv1MpqApiGetNickWithHttpInfo(input);
        }

        /// <summary>
        /// 取用户名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetNickWithHttpInfo (MpqApiGetNickHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取用户名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetNickAsync (MpqApiGetNickHttpInput input = null)
        {
             await Apiv1MpqApiGetNickAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取用户名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNickAsyncWithHttpInfo (MpqApiGetNickHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetNotice (MpqApiGetNoticeHttpInput input = null)
        {
             Apiv1MpqApiGetNoticeWithHttpInfo(input);
        }

        /// <summary>
        /// 取群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetNoticeWithHttpInfo (MpqApiGetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetNoticeAsync (MpqApiGetNoticeHttpInput input = null)
        {
             await Apiv1MpqApiGetNoticeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetNoticeAsyncWithHttpInfo (MpqApiGetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetOnlineQQlist (MpqApiGetOnlineQQlistHttpInput input = null)
        {
             Apiv1MpqApiGetOnlineQQlistWithHttpInfo(input);
        }

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetOnlineQQlistWithHttpInfo (MpqApiGetOnlineQQlistHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetOnlineQQlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetOnlineQQlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetOnlineQQlistAsync (MpqApiGetOnlineQQlistHttpInput input = null)
        {
             await Apiv1MpqApiGetOnlineQQlistAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得当前框架内在线可用的QQ列表&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetOnlineQQlistAsyncWithHttpInfo (MpqApiGetOnlineQQlistHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetOnlineQQlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetOnlineQQlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人说明&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetPersonalProfile (MpqApiGetPersonalProfileHttpInput input = null)
        {
             Apiv1MpqApiGetPersonalProfileWithHttpInfo(input);
        }

        /// <summary>
        /// 取个人说明&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetPersonalProfileWithHttpInfo (MpqApiGetPersonalProfileHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetPersonalProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetPersonalProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个人说明&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetPersonalProfileAsync (MpqApiGetPersonalProfileHttpInput input = null)
        {
             await Apiv1MpqApiGetPersonalProfileAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取个人说明&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetPersonalProfileAsyncWithHttpInfo (MpqApiGetPersonalProfileHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetPersonalProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetPersonalProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetPrefix (MpqApiGetPrefixHttpInput input = null)
        {
             Apiv1MpqApiGetPrefixWithHttpInfo(input);
        }

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetPrefixWithHttpInfo (MpqApiGetPrefixHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetPrefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetPrefix", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetPrefixAsync (MpqApiGetPrefixHttpInput input = null)
        {
             await Apiv1MpqApiGetPrefixAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得框架内设置的信息发送前缀&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetPrefixAsyncWithHttpInfo (MpqApiGetPrefixHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetPrefix";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetPrefix", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetQQAge (MpqApiGetQQAgeHttpInput input = null)
        {
             Apiv1MpqApiGetQQAgeWithHttpInfo(input);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetQQAgeWithHttpInfo (MpqApiGetQQAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetQQAgeAsync (MpqApiGetQQAgeHttpInput input = null)
        {
             await Apiv1MpqApiGetQQAgeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取Q龄 成功返回Q龄 失败返回-1&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQAgeAsyncWithHttpInfo (MpqApiGetQQAgeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQAge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQAge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetQQLevel (MpqApiGetQQLevelHttpInput input = null)
        {
             Apiv1MpqApiGetQQLevelWithHttpInfo(input);
        }

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetQQLevelWithHttpInfo (MpqApiGetQQLevelHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetQQLevelAsync (MpqApiGetQQLevelHttpInput input = null)
        {
             await Apiv1MpqApiGetQQLevelAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取QQ等级+QQ会员等级 返回json格式信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQLevelAsyncWithHttpInfo (MpqApiGetQQLevelHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQLevel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQLevel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetQQlist (MpqApiGetQQlistHttpInput input = null)
        {
             Apiv1MpqApiGetQQlistWithHttpInfo(input);
        }

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetQQlistWithHttpInfo (MpqApiGetQQlistHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetQQlistAsync (MpqApiGetQQlistHttpInput input = null)
        {
             await Apiv1MpqApiGetQQlistAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得框架内所有QQ列表。包括未登录以及登录失败的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetQQlistAsyncWithHttpInfo (MpqApiGetQQlistHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetQQlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetQQlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetRadomOnlineQQ (MpqApiGetRadomOnlineQQHttpInput input = null)
        {
             Apiv1MpqApiGetRadomOnlineQQWithHttpInfo(input);
        }

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetRadomOnlineQQWithHttpInfo (MpqApiGetRadomOnlineQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetRadomOnlineQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetRadomOnlineQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetRadomOnlineQQAsync (MpqApiGetRadomOnlineQQHttpInput input = null)
        {
             await Apiv1MpqApiGetRadomOnlineQQAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得框架内随机一个在线且可以使用的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetRadomOnlineQQAsyncWithHttpInfo (MpqApiGetRadomOnlineQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetRadomOnlineQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetRadomOnlineQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetRunPath (MpqApiGetRunPathHttpInput input = null)
        {
             Apiv1MpqApiGetRunPathWithHttpInfo(input);
        }

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetRunPathWithHttpInfo (MpqApiGetRunPathHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetRunPath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetRunPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetRunPathAsync (MpqApiGetRunPathHttpInput input = null)
        {
             await Apiv1MpqApiGetRunPathAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得框架所在目录.可能鸡肋了。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetRunPathAsyncWithHttpInfo (MpqApiGetRunPathHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetRunPath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetRunPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetSessionkey (MpqApiGetSessionkeyHttpInput input = null)
        {
             Apiv1MpqApiGetSessionkeyWithHttpInfo(input);
        }

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetSessionkeyWithHttpInfo (MpqApiGetSessionkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetSessionkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetSessionkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetSessionkeyAsync (MpqApiGetSessionkeyHttpInput input = null)
        {
             await Apiv1MpqApiGetSessionkeyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据QQ取得对应的会话秘钥&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetSessionkeyAsyncWithHttpInfo (MpqApiGetSessionkeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetSessionkey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetSessionkey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetSign (MpqApiGetSignHttpInput input = null)
        {
             Apiv1MpqApiGetSignWithHttpInfo(input);
        }

        /// <summary>
        /// 取个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetSignWithHttpInfo (MpqApiGetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetSignAsync (MpqApiGetSignHttpInput input = null)
        {
             await Apiv1MpqApiGetSignAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetSignAsyncWithHttpInfo (MpqApiGetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetTimeStamp (MpqApiGetTimeStampHttpInput input = null)
        {
             Apiv1MpqApiGetTimeStampWithHttpInfo(input);
        }

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetTimeStampWithHttpInfo (MpqApiGetTimeStampHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetTimeStamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetTimeStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetTimeStampAsync (MpqApiGetTimeStampHttpInput input = null)
        {
             await Apiv1MpqApiGetTimeStampAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取当前框架内部时间戳_周期性与服务器时间同步&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetTimeStampAsyncWithHttpInfo (MpqApiGetTimeStampHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetTimeStamp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetTimeStamp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetVersion (MpqApiGetVersionHttpInput input = null)
        {
             Apiv1MpqApiGetVersionWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetVersionWithHttpInfo (MpqApiGetVersionHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetVersionAsync (MpqApiGetVersionHttpInput input = null)
        {
             await Apiv1MpqApiGetVersionAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架版本号(发布时间戳&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetVersionAsyncWithHttpInfo (MpqApiGetVersionHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGetVersionName (MpqApiGetVersionNameHttpInput input = null)
        {
             Apiv1MpqApiGetVersionNameWithHttpInfo(input);
        }

        /// <summary>
        /// 取框架版本名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGetVersionNameWithHttpInfo (MpqApiGetVersionNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetVersionName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetVersionName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取框架版本名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGetVersionNameAsync (MpqApiGetVersionNameHttpInput input = null)
        {
             await Apiv1MpqApiGetVersionNameAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取框架版本名&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGetVersionNameAsyncWithHttpInfo (MpqApiGetVersionNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GetVersionName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGetVersionName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群ID转群号&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGidGetGN (MpqApiGidGetGNHttpInput input = null)
        {
             Apiv1MpqApiGidGetGNWithHttpInfo(input);
        }

        /// <summary>
        /// 群ID转群号&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGidGetGNWithHttpInfo (MpqApiGidGetGNHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GidGetGN";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGidGetGN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 群ID转群号&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGidGetGNAsync (MpqApiGidGetGNHttpInput input = null)
        {
             await Apiv1MpqApiGidGetGNAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 群ID转群号&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGidGetGNAsyncWithHttpInfo (MpqApiGidGetGNHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GidGetGN";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGidGetGN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGroupInvitation (MpqApiGroupInvitationHttpInput input = null)
        {
             Apiv1MpqApiGroupInvitationWithHttpInfo(input);
        }

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGroupInvitationWithHttpInfo (MpqApiGroupInvitationHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GroupInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGroupInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGroupInvitationAsync (MpqApiGroupInvitationHttpInput input = null)
        {
             await Apiv1MpqApiGroupInvitationAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 邀请对象加入群 失败返回错误理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGroupInvitationAsyncWithHttpInfo (MpqApiGroupInvitationHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GroupInvitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGroupInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiGuidGetPicLink (MpqApiGuidGetPicLinkHttpInput input = null)
        {
             Apiv1MpqApiGuidGetPicLinkWithHttpInfo(input);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiGuidGetPicLinkWithHttpInfo (MpqApiGuidGetPicLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GuidGetPicLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGuidGetPicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiGuidGetPicLinkAsync (MpqApiGuidGetPicLinkHttpInput input = null)
        {
             await Apiv1MpqApiGuidGetPicLinkAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 根据图片GUID取得图片下载连接 失败返回空&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiGuidGetPicLinkAsyncWithHttpInfo (MpqApiGuidGetPicLinkHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_GuidGetPicLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiGuidGetPicLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiIfBlock (MpqApiIfBlockHttpInput input = null)
        {
             Apiv1MpqApiIfBlockWithHttpInfo(input);
        }

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiIfBlockWithHttpInfo (MpqApiIfBlockHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IfBlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIfBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiIfBlockAsync (MpqApiIfBlockHttpInput input = null)
        {
             await Apiv1MpqApiIfBlockAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 判断是否处于被屏蔽群信息状态。&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIfBlockAsyncWithHttpInfo (MpqApiIfBlockHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IfBlock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIfBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得本插件启用状态&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiIsEnable (MpqApiIsEnableHttpInput input = null)
        {
             Apiv1MpqApiIsEnableWithHttpInfo(input);
        }

        /// <summary>
        /// 取得本插件启用状态&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiIsEnableWithHttpInfo (MpqApiIsEnableHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IsEnable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得本插件启用状态&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiIsEnableAsync (MpqApiIsEnableHttpInput input = null)
        {
             await Apiv1MpqApiIsEnableAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 取得本插件启用状态&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIsEnableAsyncWithHttpInfo (MpqApiIsEnableHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IsEnable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIsEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiIsFriend (MpqApiIsFriendHttpInput input = null)
        {
             Apiv1MpqApiIsFriendWithHttpInfo(input);
        }

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiIsFriendWithHttpInfo (MpqApiIsFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IsFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIsFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiIsFriendAsync (MpqApiIsFriendHttpInput input = null)
        {
             await Apiv1MpqApiIsFriendAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 判断对象是否为好友（双向）&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiIsFriendAsyncWithHttpInfo (MpqApiIsFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_IsFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiIsFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiJoinGroup (MpqApiJoinGroupHttpInput input = null)
        {
             Apiv1MpqApiJoinGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiJoinGroupWithHttpInfo (MpqApiJoinGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_JoinGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiJoinGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiJoinGroupAsync (MpqApiJoinGroupHttpInput input = null)
        {
             await Apiv1MpqApiJoinGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 主动加群.为了避免广告、群发行为。出现验证码时将会直接失败不处理&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiJoinGroupAsyncWithHttpInfo (MpqApiJoinGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_JoinGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiJoinGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiKick (MpqApiKickHttpInput input = null)
        {
             Apiv1MpqApiKickWithHttpInfo(input);
        }

        /// <summary>
        /// 将对象移除群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiKickWithHttpInfo (MpqApiKickHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Kick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiKick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiKickAsync (MpqApiKickHttpInput input = null)
        {
             await Apiv1MpqApiKickAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将对象移除群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiKickAsyncWithHttpInfo (MpqApiKickHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Kick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiKick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiKickDG (MpqApiKickDGHttpInput input = null)
        {
             Apiv1MpqApiKickDGWithHttpInfo(input);
        }

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiKickDGWithHttpInfo (MpqApiKickDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_KickDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiKickDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiKickDGAsync (MpqApiKickDGHttpInput input = null)
        {
             await Apiv1MpqApiKickDGAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 将对象移除讨论组.成功返回空 失败返回理由&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiKickDGAsyncWithHttpInfo (MpqApiKickDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_KickDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiKickDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 登录一个现存的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiLogin (MpqApiLoginHttpInput input = null)
        {
             Apiv1MpqApiLoginWithHttpInfo(input);
        }

        /// <summary>
        /// 登录一个现存的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiLoginWithHttpInfo (MpqApiLoginHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 登录一个现存的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiLoginAsync (MpqApiLoginHttpInput input = null)
        {
             await Apiv1MpqApiLoginAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 登录一个现存的QQ&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiLoginAsyncWithHttpInfo (MpqApiLoginHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiLogin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 让指定QQ下线&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiLogout (MpqApiLogoutHttpInput input = null)
        {
             Apiv1MpqApiLogoutWithHttpInfo(input);
        }

        /// <summary>
        /// 让指定QQ下线&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiLogoutWithHttpInfo (MpqApiLogoutHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 让指定QQ下线&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiLogoutAsync (MpqApiLogoutHttpInput input = null)
        {
             await Apiv1MpqApiLogoutAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 让指定QQ下线&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiLogoutAsyncWithHttpInfo (MpqApiLogoutHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiLogout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 在框架记录页输出一行信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiOutPut (MpqApiOutPutHttpInput input = null)
        {
             Apiv1MpqApiOutPutWithHttpInfo(input);
        }

        /// <summary>
        /// 在框架记录页输出一行信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiOutPutWithHttpInfo (MpqApiOutPutHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_OutPut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiOutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 在框架记录页输出一行信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiOutPutAsync (MpqApiOutPutHttpInput input = null)
        {
             await Apiv1MpqApiOutPutAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 在框架记录页输出一行信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiOutPutAsyncWithHttpInfo (MpqApiOutPutHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_OutPut";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiOutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出讨论组&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiQuitDG (MpqApiQuitDGHttpInput input = null)
        {
             Apiv1MpqApiQuitDGWithHttpInfo(input);
        }

        /// <summary>
        /// 退出讨论组&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiQuitDGWithHttpInfo (MpqApiQuitDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_QuitDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiQuitDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出讨论组&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiQuitDGAsync (MpqApiQuitDGHttpInput input = null)
        {
             await Apiv1MpqApiQuitDGAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 退出讨论组&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiQuitDGAsyncWithHttpInfo (MpqApiQuitDGHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_QuitDG";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiQuitDG", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiQuitGroup (MpqApiQuitGroupHttpInput input = null)
        {
             Apiv1MpqApiQuitGroupWithHttpInfo(input);
        }

        /// <summary>
        /// 退出群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiQuitGroupWithHttpInfo (MpqApiQuitGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_QuitGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiQuitGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 退出群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiQuitGroupAsync (MpqApiQuitGroupHttpInput input = null)
        {
             await Apiv1MpqApiQuitGroupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 退出群&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiQuitGroupAsyncWithHttpInfo (MpqApiQuitGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_QuitGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiQuitGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiReply (MpqApiReplyHttpInput input = null)
        {
             Apiv1MpqApiReplyWithHttpInfo(input);
        }

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiReplyWithHttpInfo (MpqApiReplyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiReply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiReplyAsync (MpqApiReplyHttpInput input = null)
        {
             await Apiv1MpqApiReplyAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 回复信息 请尽量避免使用该API&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiReplyAsyncWithHttpInfo (MpqApiReplyHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Reply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiReply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送封包&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSend (MpqApiSendHttpInput input = null)
        {
             Apiv1MpqApiSendWithHttpInfo(input);
        }

        /// <summary>
        /// 发送封包&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendWithHttpInfo (MpqApiSendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发送封包&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendAsync (MpqApiSendHttpInput input = null)
        {
             await Apiv1MpqApiSendAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发送封包&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendAsyncWithHttpInfo (MpqApiSendHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSendMsg (MpqApiSendMsgHttpInput input = null)
        {
             Apiv1MpqApiSendMsgWithHttpInfo(input);
        }

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendMsgWithHttpInfo (MpqApiSendMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendMsgAsync (MpqApiSendMsgHttpInput input = null)
        {
             await Apiv1MpqApiSendMsgAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向对象、目标发送信息 支持好友 群 讨论组 群临时会话 讨论组临时会话&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendMsgAsyncWithHttpInfo (MpqApiSendMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSendMusic (MpqApiSendMusicHttpInput input = null)
        {
             Apiv1MpqApiSendMusicWithHttpInfo(input);
        }

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendMusicWithHttpInfo (MpqApiSendMusicHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendMusic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendMusic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendMusicAsync (MpqApiSendMusicHttpInput input = null)
        {
             await Apiv1MpqApiSendMusicAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向对象发送一条音乐信息（所谓的点歌）次数不限&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendMusicAsyncWithHttpInfo (MpqApiSendMusicHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendMusic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendMusic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSendObjectMsg (MpqApiSendObjectMsgHttpInput input = null)
        {
             Apiv1MpqApiSendObjectMsgWithHttpInfo(input);
        }

        /// <summary>
        /// &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendObjectMsgWithHttpInfo (MpqApiSendObjectMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendObjectMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendObjectMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendObjectMsgAsync (MpqApiSendObjectMsgHttpInput input = null)
        {
             await Apiv1MpqApiSendObjectMsgAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendObjectMsgAsyncWithHttpInfo (MpqApiSendObjectMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendObjectMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendObjectMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSendShake (MpqApiSendShakeHttpInput input = null)
        {
             Apiv1MpqApiSendShakeWithHttpInfo(input);
        }

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendShakeWithHttpInfo (MpqApiSendShakeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendShake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendShake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendShakeAsync (MpqApiSendShakeHttpInput input = null)
        {
             await Apiv1MpqApiSendShakeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向好友发送窗口抖动信息&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendShakeAsyncWithHttpInfo (MpqApiSendShakeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendShake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendShake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSendTyping (MpqApiSendTypingHttpInput input = null)
        {
             Apiv1MpqApiSendTypingWithHttpInfo(input);
        }

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSendTypingWithHttpInfo (MpqApiSendTypingHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendTyping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendTyping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSendTypingAsync (MpqApiSendTypingHttpInput input = null)
        {
             await Apiv1MpqApiSendTypingAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 向好友发送‘正在输入’的状态信息.当好友收到信息之后 “正在输入”状态会立刻被打断&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSendTypingAsyncWithHttpInfo (MpqApiSendTypingHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SendTyping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSendTyping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSetNameCard (MpqApiSetNameCardHttpInput input = null)
        {
             Apiv1MpqApiSetNameCardWithHttpInfo(input);
        }

        /// <summary>
        /// 设置群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSetNameCardWithHttpInfo (MpqApiSetNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetNameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSetNameCardAsync (MpqApiSetNameCardHttpInput input = null)
        {
             await Apiv1MpqApiSetNameCardAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 设置群名片&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetNameCardAsyncWithHttpInfo (MpqApiSetNameCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetNameCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetNameCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSetNotice (MpqApiSetNoticeHttpInput input = null)
        {
             Apiv1MpqApiSetNoticeWithHttpInfo(input);
        }

        /// <summary>
        /// 发群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSetNoticeWithHttpInfo (MpqApiSetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 发群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSetNoticeAsync (MpqApiSetNoticeHttpInput input = null)
        {
             await Apiv1MpqApiSetNoticeAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 发群公告&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetNoticeAsyncWithHttpInfo (MpqApiSetNoticeHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetNotice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置在线状态+附加信息 &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSetOLStatus (MpqApiSetOLStatusHttpInput input = null)
        {
             Apiv1MpqApiSetOLStatusWithHttpInfo(input);
        }

        /// <summary>
        /// 设置在线状态+附加信息 &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSetOLStatusWithHttpInfo (MpqApiSetOLStatusHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetOLStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetOLStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置在线状态+附加信息 &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSetOLStatusAsync (MpqApiSetOLStatusHttpInput input = null)
        {
             await Apiv1MpqApiSetOLStatusAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 设置在线状态+附加信息 &#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetOLStatusAsyncWithHttpInfo (MpqApiSetOLStatusHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetOLStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetOLStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiSetSign (MpqApiSetSignHttpInput input = null)
        {
             Apiv1MpqApiSetSignWithHttpInfo(input);
        }

        /// <summary>
        /// 设置个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiSetSignWithHttpInfo (MpqApiSetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 设置个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiSetSignAsync (MpqApiSetSignHttpInput input = null)
        {
             await Apiv1MpqApiSetSignAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 设置个签&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiSetSignAsyncWithHttpInfo (MpqApiSetSignHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_SetSign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiSetSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 禁言群成员&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiShutup (MpqApiShutupHttpInput input = null)
        {
             Apiv1MpqApiShutupWithHttpInfo(input);
        }

        /// <summary>
        /// 禁言群成员&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiShutupWithHttpInfo (MpqApiShutupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Shutup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiShutup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 禁言群成员&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiShutupAsync (MpqApiShutupHttpInput input = null)
        {
             await Apiv1MpqApiShutupAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 禁言群成员&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiShutupAsyncWithHttpInfo (MpqApiShutupHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Shutup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiShutup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// tean加密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiTea加密 (MpqApiTea加密HttpInput input = null)
        {
             Apiv1MpqApiTea加密WithHttpInfo(input);
        }

        /// <summary>
        /// tean加密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiTea加密WithHttpInfo (MpqApiTea加密HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Tea加密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiTea加密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// tean加密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiTea加密Async (MpqApiTea加密HttpInput input = null)
        {
             await Apiv1MpqApiTea加密AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// tean加密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiTea加密AsyncWithHttpInfo (MpqApiTea加密HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Tea加密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiTea加密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// tean解密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiTea解密 (MpqApiTea解密HttpInput input = null)
        {
             Apiv1MpqApiTea解密WithHttpInfo(input);
        }

        /// <summary>
        /// tean解密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiTea解密WithHttpInfo (MpqApiTea解密HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Tea解密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiTea解密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// tean解密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiTea解密Async (MpqApiTea解密HttpInput input = null)
        {
             await Apiv1MpqApiTea解密AsyncWithHttpInfo(input);

        }

        /// <summary>
        /// tean解密算法&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiTea解密AsyncWithHttpInfo (MpqApiTea解密HttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_Tea解密";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiTea解密", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1MpqApiUploadPic (MpqApiUploadPicHttpInput input = null)
        {
             Apiv1MpqApiUploadPicWithHttpInfo(input);
        }

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1MpqApiUploadPicWithHttpInfo (MpqApiUploadPicHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_UploadPic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiUploadPic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Apiv1MpqApiUploadPicAsync (MpqApiUploadPicHttpInput input = null)
        {
             await Apiv1MpqApiUploadPicAsyncWithHttpInfo(input);

        }

        /// <summary>
        /// 返回值:成功返回图片GUID用于发送该图片.失败返回空.  图片尺寸应小于4MB&#x60; 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Apiv1MpqApiUploadPicAsyncWithHttpInfo (MpqApiUploadPicHttpInput input = null)
        {

            var localVarPath = "/api/v1/Mpq/Api_UploadPic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1MpqApiUploadPic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
