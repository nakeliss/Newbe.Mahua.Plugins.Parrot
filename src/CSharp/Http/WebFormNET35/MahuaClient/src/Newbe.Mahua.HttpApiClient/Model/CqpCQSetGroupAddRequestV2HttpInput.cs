/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 置群添加请求
    /// </summary>
    [DataContract]
    public partial class CqpCQSetGroupAddRequestV2HttpInput :  IEquatable<CqpCQSetGroupAddRequestV2HttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CqpCQSetGroupAddRequestV2HttpInput" /> class.
        /// </summary>
        /// <param name="请求反馈标识">请求事件收到的“反馈标识”参数.</param>
        /// <param name="请求类型">根据请求事件的子类型区分 #请求_群添加 或 #请求_群邀请.</param>
        /// <param name="反馈类型">#请求_通过 或 #请求_拒绝.</param>
        /// <param name="理由">操作理由，仅 #请求_群添加 且 #请求_拒绝 时可用.</param>
        public CqpCQSetGroupAddRequestV2HttpInput(string 请求反馈标识 = default(string), int? 请求类型 = default(int?), int? 反馈类型 = default(int?), string 理由 = default(string))
        {
            this.请求反馈标识 = 请求反馈标识;
            this.请求类型 = 请求类型;
            this.反馈类型 = 反馈类型;
            this.理由 = 理由;
        }
        
        /// <summary>
        /// 请求事件收到的“反馈标识”参数
        /// </summary>
        /// <value>请求事件收到的“反馈标识”参数</value>
        [DataMember(Name="请求反馈标识", EmitDefaultValue=false)]
        public string 请求反馈标识 { get; set; }

        /// <summary>
        /// 根据请求事件的子类型区分 #请求_群添加 或 #请求_群邀请
        /// </summary>
        /// <value>根据请求事件的子类型区分 #请求_群添加 或 #请求_群邀请</value>
        [DataMember(Name="请求类型", EmitDefaultValue=false)]
        public int? 请求类型 { get; set; }

        /// <summary>
        /// #请求_通过 或 #请求_拒绝
        /// </summary>
        /// <value>#请求_通过 或 #请求_拒绝</value>
        [DataMember(Name="反馈类型", EmitDefaultValue=false)]
        public int? 反馈类型 { get; set; }

        /// <summary>
        /// 操作理由，仅 #请求_群添加 且 #请求_拒绝 时可用
        /// </summary>
        /// <value>操作理由，仅 #请求_群添加 且 #请求_拒绝 时可用</value>
        [DataMember(Name="理由", EmitDefaultValue=false)]
        public string 理由 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CqpCQSetGroupAddRequestV2HttpInput {\n");
            sb.Append("  请求反馈标识: ").Append(请求反馈标识).Append("\n");
            sb.Append("  请求类型: ").Append(请求类型).Append("\n");
            sb.Append("  反馈类型: ").Append(反馈类型).Append("\n");
            sb.Append("  理由: ").Append(理由).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CqpCQSetGroupAddRequestV2HttpInput);
        }

        /// <summary>
        /// Returns true if CqpCQSetGroupAddRequestV2HttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CqpCQSetGroupAddRequestV2HttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CqpCQSetGroupAddRequestV2HttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.请求反馈标识 == input.请求反馈标识 ||
                    (this.请求反馈标识 != null &&
                    this.请求反馈标识.Equals(input.请求反馈标识))
                ) && 
                (
                    this.请求类型 == input.请求类型 ||
                    (this.请求类型 != null &&
                    this.请求类型.Equals(input.请求类型))
                ) && 
                (
                    this.反馈类型 == input.反馈类型 ||
                    (this.反馈类型 != null &&
                    this.反馈类型.Equals(input.反馈类型))
                ) && 
                (
                    this.理由 == input.理由 ||
                    (this.理由 != null &&
                    this.理由.Equals(input.理由))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.请求反馈标识 != null)
                    hashCode = hashCode * 59 + this.请求反馈标识.GetHashCode();
                if (this.请求类型 != null)
                    hashCode = hashCode * 59 + this.请求类型.GetHashCode();
                if (this.反馈类型 != null)
                    hashCode = hashCode * 59 + this.反馈类型.GetHashCode();
                if (this.理由 != null)
                    hashCode = hashCode * 59 + this.理由.GetHashCode();
                return hashCode;
            }
        }

    }

}
