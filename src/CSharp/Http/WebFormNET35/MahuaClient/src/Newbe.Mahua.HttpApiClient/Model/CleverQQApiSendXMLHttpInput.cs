/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 发送XML消息
    /// </summary>
    [DataContract]
    public partial class CleverQQApiSendXMLHttpInput :  IEquatable<CleverQQApiSendXMLHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiSendXMLHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">机器人QQ.</param>
        /// <param name="发送方式">1普通 2匿名（匿名需要群开启）.</param>
        /// <param name="信息类型">0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）.</param>
        /// <param name="收信对象所属群讨论组">发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空.</param>
        /// <param name="收信对象QQ">收信对象QQ.</param>
        /// <param name="objectMsg">XML代码.</param>
        /// <param name="结构子类型">0 基本 2 点歌.</param>
        public CleverQQApiSendXMLHttpInput(string 响应QQ = default(string), int? 发送方式 = default(int?), int? 信息类型 = default(int?), string 收信对象所属群讨论组 = default(string), string 收信对象QQ = default(string), string objectMsg = default(string), int? 结构子类型 = default(int?))
        {
            this.响应QQ = 响应QQ;
            this.发送方式 = 发送方式;
            this.信息类型 = 信息类型;
            this.收信对象所属群讨论组 = 收信对象所属群讨论组;
            this.收信对象QQ = 收信对象QQ;
            this.ObjectMsg = objectMsg;
            this.结构子类型 = 结构子类型;
        }
        
        /// <summary>
        /// 机器人QQ
        /// </summary>
        /// <value>机器人QQ</value>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 1普通 2匿名（匿名需要群开启）
        /// </summary>
        /// <value>1普通 2匿名（匿名需要群开启）</value>
        [DataMember(Name="发送方式", EmitDefaultValue=false)]
        public int? 发送方式 { get; set; }

        /// <summary>
        /// 0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）
        /// </summary>
        /// <value>0在线临时会话 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话 7好友验证回复会话（0、7只支持Pro版）</value>
        [DataMember(Name="信息类型", EmitDefaultValue=false)]
        public int? 信息类型 { get; set; }

        /// <summary>
        /// 发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空
        /// </summary>
        /// <value>发送群信息、讨论组、群或讨论组临时会话信息时填写，如发送对象为好友或信息类型是0时可空</value>
        [DataMember(Name="收信对象所属群_讨论组", EmitDefaultValue=false)]
        public string 收信对象所属群讨论组 { get; set; }

        /// <summary>
        /// 收信对象QQ
        /// </summary>
        /// <value>收信对象QQ</value>
        [DataMember(Name="收信对象QQ", EmitDefaultValue=false)]
        public string 收信对象QQ { get; set; }

        /// <summary>
        /// XML代码
        /// </summary>
        /// <value>XML代码</value>
        [DataMember(Name="objectMsg", EmitDefaultValue=false)]
        public string ObjectMsg { get; set; }

        /// <summary>
        /// 0 基本 2 点歌
        /// </summary>
        /// <value>0 基本 2 点歌</value>
        [DataMember(Name="结构子类型", EmitDefaultValue=false)]
        public int? 结构子类型 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiSendXMLHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  发送方式: ").Append(发送方式).Append("\n");
            sb.Append("  信息类型: ").Append(信息类型).Append("\n");
            sb.Append("  收信对象所属群讨论组: ").Append(收信对象所属群讨论组).Append("\n");
            sb.Append("  收信对象QQ: ").Append(收信对象QQ).Append("\n");
            sb.Append("  ObjectMsg: ").Append(ObjectMsg).Append("\n");
            sb.Append("  结构子类型: ").Append(结构子类型).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiSendXMLHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiSendXMLHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiSendXMLHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiSendXMLHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.发送方式 == input.发送方式 ||
                    (this.发送方式 != null &&
                    this.发送方式.Equals(input.发送方式))
                ) && 
                (
                    this.信息类型 == input.信息类型 ||
                    (this.信息类型 != null &&
                    this.信息类型.Equals(input.信息类型))
                ) && 
                (
                    this.收信对象所属群讨论组 == input.收信对象所属群讨论组 ||
                    (this.收信对象所属群讨论组 != null &&
                    this.收信对象所属群讨论组.Equals(input.收信对象所属群讨论组))
                ) && 
                (
                    this.收信对象QQ == input.收信对象QQ ||
                    (this.收信对象QQ != null &&
                    this.收信对象QQ.Equals(input.收信对象QQ))
                ) && 
                (
                    this.ObjectMsg == input.ObjectMsg ||
                    (this.ObjectMsg != null &&
                    this.ObjectMsg.Equals(input.ObjectMsg))
                ) && 
                (
                    this.结构子类型 == input.结构子类型 ||
                    (this.结构子类型 != null &&
                    this.结构子类型.Equals(input.结构子类型))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.发送方式 != null)
                    hashCode = hashCode * 59 + this.发送方式.GetHashCode();
                if (this.信息类型 != null)
                    hashCode = hashCode * 59 + this.信息类型.GetHashCode();
                if (this.收信对象所属群讨论组 != null)
                    hashCode = hashCode * 59 + this.收信对象所属群讨论组.GetHashCode();
                if (this.收信对象QQ != null)
                    hashCode = hashCode * 59 + this.收信对象QQ.GetHashCode();
                if (this.ObjectMsg != null)
                    hashCode = hashCode * 59 + this.ObjectMsg.GetHashCode();
                if (this.结构子类型 != null)
                    hashCode = hashCode * 59 + this.结构子类型.GetHashCode();
                return hashCode;
            }
        }

    }

}
