/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 上传图片（通过读入字节集方式），可使用网页链接或本地读入，成功返回该图片GUID，失败返回空
    /// </summary>
    [DataContract]
    public partial class CleverQQApiUpLoadPicHttpInput :  IEquatable<CleverQQApiUpLoadPicHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiUpLoadPicHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">机器人QQ.</param>
        /// <param name="上传类型">1好友、临时会话  2群、讨论组 Ps：好友临时会话用类型 1，群讨论组用类型 2；当填写错误时，图片GUID发送不会成功.</param>
        /// <param name="参考对象">上传该图片所属的群号或QQ.</param>
        /// <param name="图片数据">图片字节集数据.</param>
        public CleverQQApiUpLoadPicHttpInput(string 响应QQ = default(string), int? 上传类型 = default(int?), string 参考对象 = default(string), string 图片数据 = default(string))
        {
            this.响应QQ = 响应QQ;
            this.上传类型 = 上传类型;
            this.参考对象 = 参考对象;
            this.图片数据 = 图片数据;
        }
        
        /// <summary>
        /// 机器人QQ
        /// </summary>
        /// <value>机器人QQ</value>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 1好友、临时会话  2群、讨论组 Ps：好友临时会话用类型 1，群讨论组用类型 2；当填写错误时，图片GUID发送不会成功
        /// </summary>
        /// <value>1好友、临时会话  2群、讨论组 Ps：好友临时会话用类型 1，群讨论组用类型 2；当填写错误时，图片GUID发送不会成功</value>
        [DataMember(Name="上传类型", EmitDefaultValue=false)]
        public int? 上传类型 { get; set; }

        /// <summary>
        /// 上传该图片所属的群号或QQ
        /// </summary>
        /// <value>上传该图片所属的群号或QQ</value>
        [DataMember(Name="参考对象", EmitDefaultValue=false)]
        public string 参考对象 { get; set; }

        /// <summary>
        /// 图片字节集数据
        /// </summary>
        /// <value>图片字节集数据</value>
        [DataMember(Name="图片数据", EmitDefaultValue=false)]
        public string 图片数据 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiUpLoadPicHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  上传类型: ").Append(上传类型).Append("\n");
            sb.Append("  参考对象: ").Append(参考对象).Append("\n");
            sb.Append("  图片数据: ").Append(图片数据).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiUpLoadPicHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiUpLoadPicHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiUpLoadPicHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiUpLoadPicHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.上传类型 == input.上传类型 ||
                    (this.上传类型 != null &&
                    this.上传类型.Equals(input.上传类型))
                ) && 
                (
                    this.参考对象 == input.参考对象 ||
                    (this.参考对象 != null &&
                    this.参考对象.Equals(input.参考对象))
                ) && 
                (
                    this.图片数据 == input.图片数据 ||
                    (this.图片数据 != null &&
                    this.图片数据.Equals(input.图片数据))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.上传类型 != null)
                    hashCode = hashCode * 59 + this.上传类型.GetHashCode();
                if (this.参考对象 != null)
                    hashCode = hashCode * 59 + this.参考对象.GetHashCode();
                if (this.图片数据 != null)
                    hashCode = hashCode * 59 + this.图片数据.GetHashCode();
                return hashCode;
            }
        }

    }

}
