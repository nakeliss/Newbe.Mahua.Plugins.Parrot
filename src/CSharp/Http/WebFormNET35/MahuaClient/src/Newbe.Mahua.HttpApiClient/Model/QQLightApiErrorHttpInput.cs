/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 置插件错误管理
    /// </summary>
    [DataContract]
    public partial class QQLightApiErrorHttpInput :  IEquatable<QQLightApiErrorHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApiErrorHttpInput" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="str">str.</param>
        public QQLightApiErrorHttpInput(string code = default(string), string str = default(string))
        {
            this.Code = code;
            this.Str = str;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Str
        /// </summary>
        [DataMember(Name="str", EmitDefaultValue=false)]
        public string Str { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QQLightApiErrorHttpInput {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Str: ").Append(Str).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QQLightApiErrorHttpInput);
        }

        /// <summary>
        /// Returns true if QQLightApiErrorHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of QQLightApiErrorHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QQLightApiErrorHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Str == input.Str ||
                    (this.Str != null &&
                    this.Str.Equals(input.Str))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Str != null)
                    hashCode = hashCode * 59 + this.Str.GetHashCode();
                return hashCode;
            }
        }

    }

}
