/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newbe.Mahua.HttpApiClient.Client;
using Newbe.Mahua.HttpApiClient.Model;

namespace Newbe.Mahua.HttpApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQQLightApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 返回网易云点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApi163Music (QQLightApi163MusicHttpInput input = null);

        /// <summary>
        /// 返回网易云点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApi163MusicWithHttpInfo (QQLightApi163MusicHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiAddFriend (QQLightApiAddFriendHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiAddFriendWithHttpInfo (QQLightApiAddFriendHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiAddGroup (QQLightApiAddGroupHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiAddGroupWithHttpInfo (QQLightApiAddGroupHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiBan (QQLightApiBanHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiBanWithHttpInfo (QQLightApiBanHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiBanGroup (QQLightApiBanGroupHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiBanGroupWithHttpInfo (QQLightApiBanGroupHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiDeleteFriend (QQLightApiDeleteFriendHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiDeleteFriendWithHttpInfo (QQLightApiDeleteFriendHttpInput input = null);
        /// <summary>
        /// 撤回群成员的消息 机器人必须为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiDeleteMsg (QQLightApiDeleteMsgHttpInput input = null);

        /// <summary>
        /// 撤回群成员的消息 机器人必须为管理员
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiDeleteMsgWithHttpInfo (QQLightApiDeleteMsgHttpInput input = null);
        /// <summary>
        /// 置插件错误管理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiError (QQLightApiErrorHttpInput input = null);

        /// <summary>
        /// 置插件错误管理
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiErrorWithHttpInfo (QQLightApiErrorHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetClientKey (QQLightApiGetClientKeyHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetClientKeyWithHttpInfo (QQLightApiGetClientKeyHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetCookies (QQLightApiGetCookiesHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetCookiesWithHttpInfo (QQLightApiGetCookiesHttpInput input = null);
        /// <summary>
        /// 以JSON形式取得好友列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetFriendList (QQLightApiGetFriendListHttpInput input = null);

        /// <summary>
        /// 以JSON形式取得好友列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetFriendListWithHttpInfo (QQLightApiGetFriendListHttpInput input = null);
        /// <summary>
        /// 取得群内成员的名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetGroupCard (QQLightApiGetGroupCardHttpInput input = null);

        /// <summary>
        /// 取得群内成员的名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetGroupCardWithHttpInfo (QQLightApiGetGroupCardHttpInput input = null);
        /// <summary>
        /// 以JSON形式取得某群信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetGroupInfo (QQLightApiGetGroupInfoHttpInput input = null);

        /// <summary>
        /// 以JSON形式取得某群信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetGroupInfoWithHttpInfo (QQLightApiGetGroupInfoHttpInput input = null);
        /// <summary>
        /// 以JSON形式取得群列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetGroupList (QQLightApiGetGroupListHttpInput input = null);

        /// <summary>
        /// 以JSON形式取得群列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetGroupListWithHttpInfo (QQLightApiGetGroupListHttpInput input = null);
        /// <summary>
        /// 以JSON形式取得群成员列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetGroupMemberList (QQLightApiGetGroupMemberListHttpInput input = null);

        /// <summary>
        /// 以JSON形式取得群成员列表
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetGroupMemberListWithHttpInfo (QQLightApiGetGroupMemberListHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetLoginQQ (QQLightApiGetLoginQQHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetLoginQQWithHttpInfo (QQLightApiGetLoginQQHttpInput input = null);
        /// <summary>
        /// 取得某个QQ的昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetNick (QQLightApiGetNickHttpInput input = null);

        /// <summary>
        /// 取得某个QQ的昵称
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetNickWithHttpInfo (QQLightApiGetNickHttpInput input = null);
        /// <summary>
        /// 框架为插件所创建的一个目录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetPath (QQLightApiGetPathHttpInput input = null);

        /// <summary>
        /// 框架为插件所创建的一个目录
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetPathWithHttpInfo (QQLightApiGetPathHttpInput input = null);
        /// <summary>
        /// 是否开启/关闭
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetPluginState (QQLightApiGetPluginStateHttpInput input = null);

        /// <summary>
        /// 是否开启/关闭
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetPluginStateWithHttpInfo (QQLightApiGetPluginStateHttpInput input = null);
        /// <summary>
        /// 取得某个QQ的名片赞数量
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetPraiseNum (QQLightApiGetPraiseNumHttpInput input = null);

        /// <summary>
        /// 取得某个QQ的名片赞数量
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetPraiseNumWithHttpInfo (QQLightApiGetPraiseNumHttpInput input = null);
        /// <summary>
        /// 以JSON形式取得某QQ个人信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetQQInfo (QQLightApiGetQQInfoHttpInput input = null);

        /// <summary>
        /// 以JSON形式取得某QQ个人信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetQQInfoWithHttpInfo (QQLightApiGetQQInfoHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetQQinfoV2 (QQLightApiGetQQinfoV2HttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetQQinfoV2WithHttpInfo (QQLightApiGetQQinfoV2HttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiGetbkn (QQLightApiGetbknHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiGetbknWithHttpInfo (QQLightApiGetbknHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiInviteFriend (QQLightApiInviteFriendHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiInviteFriendWithHttpInfo (QQLightApiInviteFriendHttpInput input = null);
        /// <summary>
        /// 返回Json点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiJsonMusic (QQLightApiJsonMusicHttpInput input = null);

        /// <summary>
        /// 返回Json点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiJsonMusicWithHttpInfo (QQLightApiJsonMusicHttpInput input = null);
        /// <summary>
        /// 返回QQ点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiQQMusic (QQLightApiQQMusicHttpInput input = null);

        /// <summary>
        /// 返回QQ点歌XML
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiQQMusicWithHttpInfo (QQLightApiQQMusicHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiQuitDiscussGroup (QQLightApiQuitDiscussGroupHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiQuitDiscussGroupWithHttpInfo (QQLightApiQuitDiscussGroupHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiQuitGroup (QQLightApiQuitGroupHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiQuitGroupWithHttpInfo (QQLightApiQuitGroupHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiRemoveGroup (QQLightApiRemoveGroupHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiRemoveGroupWithHttpInfo (QQLightApiRemoveGroupHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiRemoveMember (QQLightApiRemoveMemberHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiRemoveMemberWithHttpInfo (QQLightApiRemoveMemberHttpInput input = null);
        /// <summary>
        /// 让机器人快速重启
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiRestart (QQLightApiRestartHttpInput input = null);

        /// <summary>
        /// 让机器人快速重启
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiRestartWithHttpInfo (QQLightApiRestartHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSendLog (QQLightApiSendLogHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSendLogWithHttpInfo (QQLightApiSendLogHttpInput input = null);
        /// <summary>
        /// 机器人发送消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSendMsg (QQLightApiSendMsgHttpInput input = null);

        /// <summary>
        /// 机器人发送消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSendMsgWithHttpInfo (QQLightApiSendMsgHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSendPraise (QQLightApiSendPraiseHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSendPraiseWithHttpInfo (QQLightApiSendPraiseHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSendShake (QQLightApiSendShakeHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSendShakeWithHttpInfo (QQLightApiSendShakeHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetAnony (QQLightApiSetAnonyHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetAnonyWithHttpInfo (QQLightApiSetAnonyHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetDiscussName (QQLightApiSetDiscussNameHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetDiscussNameWithHttpInfo (QQLightApiSetDiscussNameHttpInput input = null);
        /// <summary>
        /// 处理加好友消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetFriendAdd (QQLightApiSetFriendAddHttpInput input = null);

        /// <summary>
        /// 处理加好友消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetFriendAddWithHttpInfo (QQLightApiSetFriendAddHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetFriendName (QQLightApiSetFriendNameHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetFriendNameWithHttpInfo (QQLightApiSetFriendNameHttpInput input = null);
        /// <summary>
        /// 处理加群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetGroupAdd (QQLightApiSetGroupAddHttpInput input = null);

        /// <summary>
        /// 处理加群消息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetGroupAddWithHttpInfo (QQLightApiSetGroupAddHttpInput input = null);
        /// <summary>
        /// 修改群内成员的名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetGroupCard (QQLightApiSetGroupCardHttpInput input = null);

        /// <summary>
        /// 修改群内成员的名片
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetGroupCardWithHttpInfo (QQLightApiSetGroupCardHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetManager (QQLightApiSetManagerHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetManagerWithHttpInfo (QQLightApiSetManagerHttpInput input = null);
        /// <summary>
        /// 改变QQ在线状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetQQState (QQLightApiSetQQStateHttpInput input = null);

        /// <summary>
        /// 改变QQ在线状态
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetQQStateWithHttpInfo (QQLightApiSetQQStateHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiSetSignature (QQLightApiSetSignatureHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiSetSignatureWithHttpInfo (QQLightApiSetSignatureHttpInput input = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiUpLoadPic (QQLightApiUpLoadPicHttpInput input = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiUpLoadPicWithHttpInfo (QQLightApiUpLoadPicHttpInput input = null);
        /// <summary>
        /// 让机器人刷新插件
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        void Apiv1QQLightApiUpdatePlugin (QQLightApiUpdatePluginHttpInput input = null);

        /// <summary>
        /// 让机器人刷新插件
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Apiv1QQLightApiUpdatePluginWithHttpInfo (QQLightApiUpdatePluginHttpInput input = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QQLightApi : IQQLightApi
    {
        private Newbe.Mahua.HttpApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QQLightApi(String basePath)
        {
            this.Configuration = new Newbe.Mahua.HttpApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QQLightApi(Newbe.Mahua.HttpApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Newbe.Mahua.HttpApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Newbe.Mahua.HttpApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newbe.Mahua.HttpApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newbe.Mahua.HttpApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new Dictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// 返回网易云点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApi163Music (QQLightApi163MusicHttpInput input = null)
        {
             Apiv1QQLightApi163MusicWithHttpInfo(input);
        }

        /// <summary>
        /// 返回网易云点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApi163MusicWithHttpInfo (QQLightApi163MusicHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_163Music";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApi163Music", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiAddFriend (QQLightApiAddFriendHttpInput input = null)
        {
             Apiv1QQLightApiAddFriendWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiAddFriendWithHttpInfo (QQLightApiAddFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_AddFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiAddFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiAddGroup (QQLightApiAddGroupHttpInput input = null)
        {
             Apiv1QQLightApiAddGroupWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiAddGroupWithHttpInfo (QQLightApiAddGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_AddGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiAddGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiBan (QQLightApiBanHttpInput input = null)
        {
             Apiv1QQLightApiBanWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiBanWithHttpInfo (QQLightApiBanHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_Ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiBan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiBanGroup (QQLightApiBanGroupHttpInput input = null)
        {
             Apiv1QQLightApiBanGroupWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiBanGroupWithHttpInfo (QQLightApiBanGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_BanGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiBanGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiDeleteFriend (QQLightApiDeleteFriendHttpInput input = null)
        {
             Apiv1QQLightApiDeleteFriendWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiDeleteFriendWithHttpInfo (QQLightApiDeleteFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_DeleteFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiDeleteFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 撤回群成员的消息 机器人必须为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiDeleteMsg (QQLightApiDeleteMsgHttpInput input = null)
        {
             Apiv1QQLightApiDeleteMsgWithHttpInfo(input);
        }

        /// <summary>
        /// 撤回群成员的消息 机器人必须为管理员 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiDeleteMsgWithHttpInfo (QQLightApiDeleteMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_DeleteMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiDeleteMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 置插件错误管理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiError (QQLightApiErrorHttpInput input = null)
        {
             Apiv1QQLightApiErrorWithHttpInfo(input);
        }

        /// <summary>
        /// 置插件错误管理 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiErrorWithHttpInfo (QQLightApiErrorHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_Error";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiError", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetClientKey (QQLightApiGetClientKeyHttpInput input = null)
        {
             Apiv1QQLightApiGetClientKeyWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetClientKeyWithHttpInfo (QQLightApiGetClientKeyHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetClientKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetClientKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetCookies (QQLightApiGetCookiesHttpInput input = null)
        {
             Apiv1QQLightApiGetCookiesWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetCookiesWithHttpInfo (QQLightApiGetCookiesHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetCookies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetCookies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 以JSON形式取得好友列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetFriendList (QQLightApiGetFriendListHttpInput input = null)
        {
             Apiv1QQLightApiGetFriendListWithHttpInfo(input);
        }

        /// <summary>
        /// 以JSON形式取得好友列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetFriendListWithHttpInfo (QQLightApiGetFriendListHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetFriendList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetFriendList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得群内成员的名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetGroupCard (QQLightApiGetGroupCardHttpInput input = null)
        {
             Apiv1QQLightApiGetGroupCardWithHttpInfo(input);
        }

        /// <summary>
        /// 取得群内成员的名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetGroupCardWithHttpInfo (QQLightApiGetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 以JSON形式取得某群信息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetGroupInfo (QQLightApiGetGroupInfoHttpInput input = null)
        {
             Apiv1QQLightApiGetGroupInfoWithHttpInfo(input);
        }

        /// <summary>
        /// 以JSON形式取得某群信息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetGroupInfoWithHttpInfo (QQLightApiGetGroupInfoHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetGroupInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetGroupInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 以JSON形式取得群列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetGroupList (QQLightApiGetGroupListHttpInput input = null)
        {
             Apiv1QQLightApiGetGroupListWithHttpInfo(input);
        }

        /// <summary>
        /// 以JSON形式取得群列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetGroupListWithHttpInfo (QQLightApiGetGroupListHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetGroupList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetGroupList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 以JSON形式取得群成员列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetGroupMemberList (QQLightApiGetGroupMemberListHttpInput input = null)
        {
             Apiv1QQLightApiGetGroupMemberListWithHttpInfo(input);
        }

        /// <summary>
        /// 以JSON形式取得群成员列表 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetGroupMemberListWithHttpInfo (QQLightApiGetGroupMemberListHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetGroupMemberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetGroupMemberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetLoginQQ (QQLightApiGetLoginQQHttpInput input = null)
        {
             Apiv1QQLightApiGetLoginQQWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetLoginQQWithHttpInfo (QQLightApiGetLoginQQHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetLoginQQ";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetLoginQQ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得某个QQ的昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetNick (QQLightApiGetNickHttpInput input = null)
        {
             Apiv1QQLightApiGetNickWithHttpInfo(input);
        }

        /// <summary>
        /// 取得某个QQ的昵称 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetNickWithHttpInfo (QQLightApiGetNickHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetNick";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetNick", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 框架为插件所创建的一个目录 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetPath (QQLightApiGetPathHttpInput input = null)
        {
             Apiv1QQLightApiGetPathWithHttpInfo(input);
        }

        /// <summary>
        /// 框架为插件所创建的一个目录 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetPathWithHttpInfo (QQLightApiGetPathHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetPath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 是否开启/关闭 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetPluginState (QQLightApiGetPluginStateHttpInput input = null)
        {
             Apiv1QQLightApiGetPluginStateWithHttpInfo(input);
        }

        /// <summary>
        /// 是否开启/关闭 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetPluginStateWithHttpInfo (QQLightApiGetPluginStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetPluginState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetPluginState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 取得某个QQ的名片赞数量 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetPraiseNum (QQLightApiGetPraiseNumHttpInput input = null)
        {
             Apiv1QQLightApiGetPraiseNumWithHttpInfo(input);
        }

        /// <summary>
        /// 取得某个QQ的名片赞数量 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetPraiseNumWithHttpInfo (QQLightApiGetPraiseNumHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetPraiseNum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetPraiseNum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 以JSON形式取得某QQ个人信息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetQQInfo (QQLightApiGetQQInfoHttpInput input = null)
        {
             Apiv1QQLightApiGetQQInfoWithHttpInfo(input);
        }

        /// <summary>
        /// 以JSON形式取得某QQ个人信息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetQQInfoWithHttpInfo (QQLightApiGetQQInfoHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetQQInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetQQInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetQQinfoV2 (QQLightApiGetQQinfoV2HttpInput input = null)
        {
             Apiv1QQLightApiGetQQinfoV2WithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetQQinfoV2WithHttpInfo (QQLightApiGetQQinfoV2HttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_GetQQinfo_v2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetQQinfoV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiGetbkn (QQLightApiGetbknHttpInput input = null)
        {
             Apiv1QQLightApiGetbknWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiGetbknWithHttpInfo (QQLightApiGetbknHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_Getbkn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiGetbkn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiInviteFriend (QQLightApiInviteFriendHttpInput input = null)
        {
             Apiv1QQLightApiInviteFriendWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiInviteFriendWithHttpInfo (QQLightApiInviteFriendHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_InviteFriend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiInviteFriend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 返回Json点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiJsonMusic (QQLightApiJsonMusicHttpInput input = null)
        {
             Apiv1QQLightApiJsonMusicWithHttpInfo(input);
        }

        /// <summary>
        /// 返回Json点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiJsonMusicWithHttpInfo (QQLightApiJsonMusicHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_JsonMusic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiJsonMusic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 返回QQ点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiQQMusic (QQLightApiQQMusicHttpInput input = null)
        {
             Apiv1QQLightApiQQMusicWithHttpInfo(input);
        }

        /// <summary>
        /// 返回QQ点歌XML 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiQQMusicWithHttpInfo (QQLightApiQQMusicHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_QQMusic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiQQMusic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiQuitDiscussGroup (QQLightApiQuitDiscussGroupHttpInput input = null)
        {
             Apiv1QQLightApiQuitDiscussGroupWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiQuitDiscussGroupWithHttpInfo (QQLightApiQuitDiscussGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_QuitDiscussGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiQuitDiscussGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiQuitGroup (QQLightApiQuitGroupHttpInput input = null)
        {
             Apiv1QQLightApiQuitGroupWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiQuitGroupWithHttpInfo (QQLightApiQuitGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_QuitGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiQuitGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiRemoveGroup (QQLightApiRemoveGroupHttpInput input = null)
        {
             Apiv1QQLightApiRemoveGroupWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiRemoveGroupWithHttpInfo (QQLightApiRemoveGroupHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_RemoveGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiRemoveGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiRemoveMember (QQLightApiRemoveMemberHttpInput input = null)
        {
             Apiv1QQLightApiRemoveMemberWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiRemoveMemberWithHttpInfo (QQLightApiRemoveMemberHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_RemoveMember";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiRemoveMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 让机器人快速重启 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiRestart (QQLightApiRestartHttpInput input = null)
        {
             Apiv1QQLightApiRestartWithHttpInfo(input);
        }

        /// <summary>
        /// 让机器人快速重启 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiRestartWithHttpInfo (QQLightApiRestartHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_Restart";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiRestart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSendLog (QQLightApiSendLogHttpInput input = null)
        {
             Apiv1QQLightApiSendLogWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSendLogWithHttpInfo (QQLightApiSendLogHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SendLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSendLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 机器人发送消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSendMsg (QQLightApiSendMsgHttpInput input = null)
        {
             Apiv1QQLightApiSendMsgWithHttpInfo(input);
        }

        /// <summary>
        /// 机器人发送消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSendMsgWithHttpInfo (QQLightApiSendMsgHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SendMsg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSendMsg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSendPraise (QQLightApiSendPraiseHttpInput input = null)
        {
             Apiv1QQLightApiSendPraiseWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSendPraiseWithHttpInfo (QQLightApiSendPraiseHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SendPraise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSendPraise", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSendShake (QQLightApiSendShakeHttpInput input = null)
        {
             Apiv1QQLightApiSendShakeWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSendShakeWithHttpInfo (QQLightApiSendShakeHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SendShake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSendShake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetAnony (QQLightApiSetAnonyHttpInput input = null)
        {
             Apiv1QQLightApiSetAnonyWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetAnonyWithHttpInfo (QQLightApiSetAnonyHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetAnony";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetAnony", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetDiscussName (QQLightApiSetDiscussNameHttpInput input = null)
        {
             Apiv1QQLightApiSetDiscussNameWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetDiscussNameWithHttpInfo (QQLightApiSetDiscussNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetDiscussName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetDiscussName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 处理加好友消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetFriendAdd (QQLightApiSetFriendAddHttpInput input = null)
        {
             Apiv1QQLightApiSetFriendAddWithHttpInfo(input);
        }

        /// <summary>
        /// 处理加好友消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetFriendAddWithHttpInfo (QQLightApiSetFriendAddHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetFriendAdd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetFriendAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetFriendName (QQLightApiSetFriendNameHttpInput input = null)
        {
             Apiv1QQLightApiSetFriendNameWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetFriendNameWithHttpInfo (QQLightApiSetFriendNameHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetFriendName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetFriendName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 处理加群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetGroupAdd (QQLightApiSetGroupAddHttpInput input = null)
        {
             Apiv1QQLightApiSetGroupAddWithHttpInfo(input);
        }

        /// <summary>
        /// 处理加群消息 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetGroupAddWithHttpInfo (QQLightApiSetGroupAddHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetGroupAdd";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetGroupAdd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 修改群内成员的名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetGroupCard (QQLightApiSetGroupCardHttpInput input = null)
        {
             Apiv1QQLightApiSetGroupCardWithHttpInfo(input);
        }

        /// <summary>
        /// 修改群内成员的名片 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetGroupCardWithHttpInfo (QQLightApiSetGroupCardHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetGroupCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetGroupCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetManager (QQLightApiSetManagerHttpInput input = null)
        {
             Apiv1QQLightApiSetManagerWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetManagerWithHttpInfo (QQLightApiSetManagerHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetManager";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 改变QQ在线状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetQQState (QQLightApiSetQQStateHttpInput input = null)
        {
             Apiv1QQLightApiSetQQStateWithHttpInfo(input);
        }

        /// <summary>
        /// 改变QQ在线状态 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetQQStateWithHttpInfo (QQLightApiSetQQStateHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetQQState";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetQQState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiSetSignature (QQLightApiSetSignatureHttpInput input = null)
        {
             Apiv1QQLightApiSetSignatureWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiSetSignatureWithHttpInfo (QQLightApiSetSignatureHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_SetSignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiSetSignature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiUpLoadPic (QQLightApiUpLoadPicHttpInput input = null)
        {
             Apiv1QQLightApiUpLoadPicWithHttpInfo(input);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiUpLoadPicWithHttpInfo (QQLightApiUpLoadPicHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_UpLoadPic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiUpLoadPic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// 让机器人刷新插件 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns></returns>
        public void Apiv1QQLightApiUpdatePlugin (QQLightApiUpdatePluginHttpInput input = null)
        {
             Apiv1QQLightApiUpdatePluginWithHttpInfo(input);
        }

        /// <summary>
        /// 让机器人刷新插件 
        /// </summary>
        /// <exception cref="Newbe.Mahua.HttpApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Apiv1QQLightApiUpdatePluginWithHttpInfo (QQLightApiUpdatePluginHttpInput input = null)
        {

            var localVarPath = "/api/v1/QQLight/Api_UpdatePlugin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (input != null && input.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(input); // http body (model) parameter
            }
            else
            {
                localVarPostBody = input; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Apiv1QQLightApiUpdatePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
