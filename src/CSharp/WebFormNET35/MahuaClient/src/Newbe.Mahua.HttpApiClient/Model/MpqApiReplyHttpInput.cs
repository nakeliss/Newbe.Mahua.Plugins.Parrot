/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 回复信息 请尽量避免使用该API&#x60;
    /// </summary>
    [DataContract]
    public partial class MpqApiReplyHttpInput :  IEquatable<MpqApiReplyHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MpqApiReplyHttpInput" /> class.
        /// </summary>
        /// <param name="响应的QQ">响应的QQ.</param>
        /// <param name="信息类型">1好友 2群 3讨论组 4群临时会话 5讨论组临时会话.</param>
        /// <param name="回复对象">接收这条信息的对象.</param>
        /// <param name="内容">信息内容.</param>
        public MpqApiReplyHttpInput(string 响应的QQ = default(string), int? 信息类型 = default(int?), string 回复对象 = default(string), string 内容 = default(string))
        {
            this.响应的QQ = 响应的QQ;
            this.信息类型 = 信息类型;
            this.回复对象 = 回复对象;
            this.内容 = 内容;
        }
        
        /// <summary>
        /// Gets or Sets 响应的QQ
        /// </summary>
        [DataMember(Name="响应的QQ", EmitDefaultValue=false)]
        public string 响应的QQ { get; set; }

        /// <summary>
        /// 1好友 2群 3讨论组 4群临时会话 5讨论组临时会话
        /// </summary>
        /// <value>1好友 2群 3讨论组 4群临时会话 5讨论组临时会话</value>
        [DataMember(Name="信息类型", EmitDefaultValue=false)]
        public int? 信息类型 { get; set; }

        /// <summary>
        /// 接收这条信息的对象
        /// </summary>
        /// <value>接收这条信息的对象</value>
        [DataMember(Name="回复对象", EmitDefaultValue=false)]
        public string 回复对象 { get; set; }

        /// <summary>
        /// 信息内容
        /// </summary>
        /// <value>信息内容</value>
        [DataMember(Name="内容", EmitDefaultValue=false)]
        public string 内容 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MpqApiReplyHttpInput {\n");
            sb.Append("  响应的QQ: ").Append(响应的QQ).Append("\n");
            sb.Append("  信息类型: ").Append(信息类型).Append("\n");
            sb.Append("  回复对象: ").Append(回复对象).Append("\n");
            sb.Append("  内容: ").Append(内容).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MpqApiReplyHttpInput);
        }

        /// <summary>
        /// Returns true if MpqApiReplyHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of MpqApiReplyHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MpqApiReplyHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应的QQ == input.响应的QQ ||
                    (this.响应的QQ != null &&
                    this.响应的QQ.Equals(input.响应的QQ))
                ) && 
                (
                    this.信息类型 == input.信息类型 ||
                    (this.信息类型 != null &&
                    this.信息类型.Equals(input.信息类型))
                ) && 
                (
                    this.回复对象 == input.回复对象 ||
                    (this.回复对象 != null &&
                    this.回复对象.Equals(input.回复对象))
                ) && 
                (
                    this.内容 == input.内容 ||
                    (this.内容 != null &&
                    this.内容.Equals(input.内容))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应的QQ != null)
                    hashCode = hashCode * 59 + this.响应的QQ.GetHashCode();
                if (this.信息类型 != null)
                    hashCode = hashCode * 59 + this.信息类型.GetHashCode();
                if (this.回复对象 != null)
                    hashCode = hashCode * 59 + this.回复对象.GetHashCode();
                if (this.内容 != null)
                    hashCode = hashCode * 59 + this.内容.GetHashCode();
                return hashCode;
            }
        }

    }

}
