/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 根据图片GUID取得图片下载连接
    /// </summary>
    [DataContract]
    public partial class CleverQQApiGetPicLinkHttpInput :  IEquatable<CleverQQApiGetPicLinkHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CleverQQApiGetPicLinkHttpInput" /> class.
        /// </summary>
        /// <param name="响应QQ">机器人QQ.</param>
        /// <param name="图片类型">1 群 讨论组  2临时会话和好友.</param>
        /// <param name="参考对象">图片所属对应的群号和好友QQ（可随意乱填写）.</param>
        /// <param name="图片GUID">例如[IR:pic&#x3D;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}.jpg].</param>
        public CleverQQApiGetPicLinkHttpInput(string 响应QQ = default(string), int? 图片类型 = default(int?), string 参考对象 = default(string), string 图片GUID = default(string))
        {
            this.响应QQ = 响应QQ;
            this.图片类型 = 图片类型;
            this.参考对象 = 参考对象;
            this.图片GUID = 图片GUID;
        }
        
        /// <summary>
        /// 机器人QQ
        /// </summary>
        /// <value>机器人QQ</value>
        [DataMember(Name="响应QQ", EmitDefaultValue=false)]
        public string 响应QQ { get; set; }

        /// <summary>
        /// 1 群 讨论组  2临时会话和好友
        /// </summary>
        /// <value>1 群 讨论组  2临时会话和好友</value>
        [DataMember(Name="图片类型", EmitDefaultValue=false)]
        public int? 图片类型 { get; set; }

        /// <summary>
        /// 图片所属对应的群号和好友QQ（可随意乱填写）
        /// </summary>
        /// <value>图片所属对应的群号和好友QQ（可随意乱填写）</value>
        [DataMember(Name="参考对象", EmitDefaultValue=false)]
        public string 参考对象 { get; set; }

        /// <summary>
        /// 例如[IR:pic&#x3D;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}.jpg]
        /// </summary>
        /// <value>例如[IR:pic&#x3D;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}.jpg]</value>
        [DataMember(Name="图片GUID", EmitDefaultValue=false)]
        public string 图片GUID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CleverQQApiGetPicLinkHttpInput {\n");
            sb.Append("  响应QQ: ").Append(响应QQ).Append("\n");
            sb.Append("  图片类型: ").Append(图片类型).Append("\n");
            sb.Append("  参考对象: ").Append(参考对象).Append("\n");
            sb.Append("  图片GUID: ").Append(图片GUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CleverQQApiGetPicLinkHttpInput);
        }

        /// <summary>
        /// Returns true if CleverQQApiGetPicLinkHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CleverQQApiGetPicLinkHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CleverQQApiGetPicLinkHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.响应QQ == input.响应QQ ||
                    (this.响应QQ != null &&
                    this.响应QQ.Equals(input.响应QQ))
                ) && 
                (
                    this.图片类型 == input.图片类型 ||
                    (this.图片类型 != null &&
                    this.图片类型.Equals(input.图片类型))
                ) && 
                (
                    this.参考对象 == input.参考对象 ||
                    (this.参考对象 != null &&
                    this.参考对象.Equals(input.参考对象))
                ) && 
                (
                    this.图片GUID == input.图片GUID ||
                    (this.图片GUID != null &&
                    this.图片GUID.Equals(input.图片GUID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.响应QQ != null)
                    hashCode = hashCode * 59 + this.响应QQ.GetHashCode();
                if (this.图片类型 != null)
                    hashCode = hashCode * 59 + this.图片类型.GetHashCode();
                if (this.参考对象 != null)
                    hashCode = hashCode * 59 + this.参考对象.GetHashCode();
                if (this.图片GUID != null)
                    hashCode = hashCode * 59 + this.图片GUID.GetHashCode();
                return hashCode;
            }
        }

    }

}
