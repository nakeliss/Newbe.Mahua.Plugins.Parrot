/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// 处理加好友消息
    /// </summary>
    [DataContract]
    public partial class QQLightApiSetFriendAddHttpInput :  IEquatable<QQLightApiSetFriendAddHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApiSetFriendAddHttpInput" /> class.
        /// </summary>
        /// <param name="qQ号">qQ号.</param>
        /// <param name="操作方式">1.同意 2.拒绝 3.忽略.</param>
        /// <param name="拒绝理由">参数可为空，且为 拒绝 时有效.</param>
        public QQLightApiSetFriendAddHttpInput(string qQ号 = default(string), int? 操作方式 = default(int?), string 拒绝理由 = default(string))
        {
            this.QQ号 = qQ号;
            this.操作方式 = 操作方式;
            this.拒绝理由 = 拒绝理由;
        }
        
        /// <summary>
        /// Gets or Sets QQ号
        /// </summary>
        [DataMember(Name="qQ号", EmitDefaultValue=false)]
        public string QQ号 { get; set; }

        /// <summary>
        /// 1.同意 2.拒绝 3.忽略
        /// </summary>
        /// <value>1.同意 2.拒绝 3.忽略</value>
        [DataMember(Name="操作方式", EmitDefaultValue=false)]
        public int? 操作方式 { get; set; }

        /// <summary>
        /// 参数可为空，且为 拒绝 时有效
        /// </summary>
        /// <value>参数可为空，且为 拒绝 时有效</value>
        [DataMember(Name="拒绝理由", EmitDefaultValue=false)]
        public string 拒绝理由 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QQLightApiSetFriendAddHttpInput {\n");
            sb.Append("  QQ号: ").Append(QQ号).Append("\n");
            sb.Append("  操作方式: ").Append(操作方式).Append("\n");
            sb.Append("  拒绝理由: ").Append(拒绝理由).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QQLightApiSetFriendAddHttpInput);
        }

        /// <summary>
        /// Returns true if QQLightApiSetFriendAddHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of QQLightApiSetFriendAddHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QQLightApiSetFriendAddHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QQ号 == input.QQ号 ||
                    (this.QQ号 != null &&
                    this.QQ号.Equals(input.QQ号))
                ) && 
                (
                    this.操作方式 == input.操作方式 ||
                    (this.操作方式 != null &&
                    this.操作方式.Equals(input.操作方式))
                ) && 
                (
                    this.拒绝理由 == input.拒绝理由 ||
                    (this.拒绝理由 != null &&
                    this.拒绝理由.Equals(input.拒绝理由))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QQ号 != null)
                    hashCode = hashCode * 59 + this.QQ号.GetHashCode();
                if (this.操作方式 != null)
                    hashCode = hashCode * 59 + this.操作方式.GetHashCode();
                if (this.拒绝理由 != null)
                    hashCode = hashCode * 59 + this.拒绝理由.GetHashCode();
                return hashCode;
            }
        }

    }

}
