/* 
 * Newbe.Mahua.HttpApi
 *
 * this is http api document for Newbe.Mahua. You can get some help from http://www.newbe.pro
 *
 * OpenAPI spec version: v1
 * Contact: 472158246@qq.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Newbe.Mahua.HttpApiClient.Client.SwaggerDateConverter;

namespace Newbe.Mahua.HttpApiClient.Model
{
    /// <summary>
    /// QQLightApiUpLoadPicHttpInput
    /// </summary>
    [DataContract]
    public partial class QQLightApiUpLoadPicHttpInput :  IEquatable<QQLightApiUpLoadPicHttpInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QQLightApiUpLoadPicHttpInput" /> class.
        /// </summary>
        /// <param name="类型">类型.</param>
        /// <param name="对象">对象.</param>
        /// <param name="图片字节集">Hex形式.</param>
        public QQLightApiUpLoadPicHttpInput(int? 类型 = default(int?), string 对象 = default(string), string 图片字节集 = default(string))
        {
            this.类型 = 类型;
            this.对象 = 对象;
            this.图片字节集 = 图片字节集;
        }
        
        /// <summary>
        /// Gets or Sets 类型
        /// </summary>
        [DataMember(Name="类型", EmitDefaultValue=false)]
        public int? 类型 { get; set; }

        /// <summary>
        /// Gets or Sets 对象
        /// </summary>
        [DataMember(Name="对象", EmitDefaultValue=false)]
        public string 对象 { get; set; }

        /// <summary>
        /// Hex形式
        /// </summary>
        /// <value>Hex形式</value>
        [DataMember(Name="图片字节集", EmitDefaultValue=false)]
        public string 图片字节集 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QQLightApiUpLoadPicHttpInput {\n");
            sb.Append("  类型: ").Append(类型).Append("\n");
            sb.Append("  对象: ").Append(对象).Append("\n");
            sb.Append("  图片字节集: ").Append(图片字节集).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QQLightApiUpLoadPicHttpInput);
        }

        /// <summary>
        /// Returns true if QQLightApiUpLoadPicHttpInput instances are equal
        /// </summary>
        /// <param name="input">Instance of QQLightApiUpLoadPicHttpInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QQLightApiUpLoadPicHttpInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.类型 == input.类型 ||
                    (this.类型 != null &&
                    this.类型.Equals(input.类型))
                ) && 
                (
                    this.对象 == input.对象 ||
                    (this.对象 != null &&
                    this.对象.Equals(input.对象))
                ) && 
                (
                    this.图片字节集 == input.图片字节集 ||
                    (this.图片字节集 != null &&
                    this.图片字节集.Equals(input.图片字节集))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.类型 != null)
                    hashCode = hashCode * 59 + this.类型.GetHashCode();
                if (this.对象 != null)
                    hashCode = hashCode * 59 + this.对象.GetHashCode();
                if (this.图片字节集 != null)
                    hashCode = hashCode * 59 + this.图片字节集.GetHashCode();
                return hashCode;
            }
        }

    }

}
